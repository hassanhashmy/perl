.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::SourceHandler::Perl 3"
.TH TAP::Parser::SourceHandler::Perl 3 "2017-04-06" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::SourceHandler::Perl \- Stream TAP from a Perl executable
.SH "VERSION"
.IX Header "VERSION"
Version 3.39
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use TAP::Parser::Source;
\&  use TAP::Parser::SourceHandler::Perl;
\&
\&  my $source = TAP::Parser::Source\->new\->raw( \e\*(Aqscript.pl\*(Aq );
\&  $source\->assemble_meta;
\&
\&  my $class = \*(AqTAP::Parser::SourceHandler::Perl\*(Aq;
\&  my $vote  = $class\->can_handle( $source );
\&  my $iter  = $class\->make_iterator( $source );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a \fIPerl\fR TAP::Parser::SourceHandler \- it has 2 jobs:
.PP
1. Figure out if the TAP::Parser::Source it's given is actually a Perl
script (\*(L"can_handle\*(R").
.PP
2. Creates an iterator for Perl sources (\*(L"make_iterator\*(R").
.PP
Unless you're writing a plugin or subclassing TAP::Parser, you probably
won't need to use this module directly.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`can_handle\*(C'\fI\fR
.IX Subsection "can_handle"
.PP
.Vb 1
\&  my $vote = $class\->can_handle( $source );
.Ve
.PP
Only votes if \f(CW$source\fR looks like a file.  Casts the following votes:
.PP
.Vb 6
\&  0.9  if it has a shebang ala "#!...perl"
\&  0.75 if it has any shebang
\&  0.8  if it\*(Aqs a .t file
\&  0.9  if it\*(Aqs a .pl file
\&  0.75 if it\*(Aqs in a \*(Aqt\*(Aq directory
\&  0.25 by default (backwards compat)
.Ve
.PP
\fI\f(CI\*(C`make_iterator\*(C'\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $class\->make_iterator( $source );
.Ve
.PP
Constructs & returns a new TAP::Parser::Iterator::Process for the source.
Assumes \f(CW\*(C`$source\->raw\*(C'\fR contains a reference to the perl script.  \f(CW\*(C`croak\*(C'\fRs
if the file could not be found.
.PP
The command to run is built as follows:
.PP
.Vb 1
\&  $perl @switches $perl_script @test_args
.Ve
.PP
The perl command to use is determined by \*(L"get_perl\*(R".  The command generated
is guaranteed to preserve:
.PP
.Vb 3
\&  PERL5LIB
\&  PERL5OPT
\&  Taint Mode, if set in the script\*(Aqs shebang
.Ve
.PP
\&\fINote:\fR the command generated will \fInot\fR respect any shebang line defined in
your Perl script.  This is only a problem if you have compiled a custom version
of Perl or if you want to use a specific version of Perl for one test and a
different version for another, for example:
.PP
.Vb 2
\&  #!/path/to/a/custom_perl \-\-some \-\-args
\&  #!/usr/local/perl\-5.6/bin/perl \-w
.Ve
.PP
Currently you need to write a plugin to get around this.
.PP
\fI\f(CI\*(C`get_taint\*(C'\fI\fR
.IX Subsection "get_taint"
.PP
Decode any taint switches from a Perl shebang line.
.PP
.Vb 2
\&  # $taint will be \*(Aqt\*(Aq
\&  my $taint = TAP::Parser::SourceHandler::Perl\->get_taint( \*(Aq#!/usr/bin/perl \-t\*(Aq );
\&
\&  # $untaint will be undefined
\&  my $untaint = TAP::Parser::SourceHandler::Perl\->get_taint( \*(Aq#!/usr/bin/perl\*(Aq );
.Ve
.PP
\fI\f(CI\*(C`get_perl\*(C'\fI\fR
.IX Subsection "get_perl"
.PP
Gets the version of Perl currently running the test suite.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see \*(L"\s-1SUBCLASSING\*(R"\s0 in TAP::Parser for a subclassing overview.
.SS "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyPerlSourceHandler;
\&
\&  use strict;
\&
\&  use TAP::Parser::SourceHandler::Perl;
\&
\&  use base \*(AqTAP::Parser::SourceHandler::Perl\*(Aq;
\&
\&  # use the version of perl from the shebang line in the test file
\&  sub get_perl {
\&      my $self = shift;
\&      if (my $shebang = $self\->shebang( $self\->{file} )) {
\&          $shebang =~ /^#!(.*\ebperl.*?)(?:(?:\es)|(?:$))/;
\&          return $1 if $1;
\&      }
\&      return $self\->SUPER::get_perl(@_);
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::IteratorFactory,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::Executable,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Handle,
TAP::Parser::SourceHandler::RawTAP
