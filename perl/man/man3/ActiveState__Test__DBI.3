.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Test::DBI 3"
.TH ActiveState::Test::DBI 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Test::DBI \- Database test resources
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use ActiveState::Test::DBI;
\&  my $dbh = ActiveState::Test::DBI\->connect("oracle\-112");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provide the information about the test databases we have available.
These are scratch databases that can be messed with from database regression
test scripts.  The test script ought to use unique prefixes for the objects (tables, etc.)
it creates so that multiple tests can run in parallell without conflict.
.PP
The following functions and methods are provided:
.IP "\fBservers()\fR" 4
.IX Item "servers()"
This returns a list of names of the test servers provided.
.ie n .IP "server_info( $name )" 4
.el .IP "server_info( \f(CW$name\fR )" 4
.IX Item "server_info( $name )"
This returns a hash describing various attributes of the given test server.
Returns \f(CW\*(C`undef\*(C'\fR if no such test server exists.
.Sp
The hash fields are:
.RS 4
.IP "host" 4
.IX Item "host"
The host where the test database is found.
.IP "port" 4
.IX Item "port"
The port to connect to.  If missing use the default for the database.
.IP "user" 4
.IX Item "user"
The user name to be used for login
.IP "password" 4
.IX Item "password"
The password to be used for login
.IP "database" 4
.IX Item "database"
The database name on the host.  Might be missing if the user/password
combination is enough to select the database.
.IP "dbi_driver" 4
.IX Item "dbi_driver"
The name of the \f(CW\*(C`DBH::\*(C'\fR\-module required to connect to the database with \s-1DBI.\s0
.IP "dbi_dsn" 4
.IX Item "dbi_dsn"
The \f(CW$data_source\fR string that you need to pass to \f(CW\*(C`DBI\->connect\*(C'\fR.
.RE
.RS 4
.RE
.ie n .IP "ActiveState::Test::DBI\->connect( $name )" 4
.el .IP "ActiveState::Test::DBI\->connect( \f(CW$name\fR )" 4
.IX Item "ActiveState::Test::DBI->connect( $name )"
Try to connect to the given server and return a database handle object.
See \s-1DBI\s0 for what you can do with it.
Croaks if no such test server exists.  \s-1DBI\s0 will croak if the driver is
missing or the server fails to respond.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1DBI\s0
.SH "BUGS"
.IX Header "BUGS"
none.
