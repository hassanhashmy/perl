.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Unix::Network 3"
.TH ActiveState::Unix::Network 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Unix::Network \- Portable way to determine host networking info
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& use ActiveState::Unix::Network qw(interfaces);
\& my $interfaces = interfaces;
\& foreach my $i (@$interfaces) {
\&     foreach (qw(ip netmask subnet)) {
\&         print "ip = $i\->{$_}\en";
\&     }
\&     print "\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a single function called \fBinterfaces()\fR that will run ifconfig
(and lanscan on \s-1HPUX\s0) to examine the external network interfaces.  It will parse 
the networking info and return an array of external interfaces.
.IP "\fBinterfaces()\fR" 4
.IX Item "interfaces()"
This function will return an arrayref containing a hashref for each of the 
interfaces discovered.  Each hashref will contain the following keys:
.RS 4
.IP "ip" 4
.IX Item "ip"
.PD 0
.IP "netmask" 4
.IX Item "netmask"
.IP "subnet" 4
.IX Item "subnet"
.IP "network_bits" 4
.IX Item "network_bits"
.PD
Number of network bits in \s-1IP\s0 address (used for \s-1CIDR\s0 blocks).
.RE
.RS 4
.RE
.ie n .IP "mask_off( $ip, $mask )" 4
.el .IP "mask_off( \f(CW$ip\fR, \f(CW$mask\fR )" 4
.IX Item "mask_off( $ip, $mask )"
Computes the subnet from an \s-1IP\s0 and netmask.
.ie n .IP "num2ip( $ip )" 4
.el .IP "num2ip( \f(CW$ip\fR )" 4
.IX Item "num2ip( $ip )"
Converts an \s-1IP\s0 address from numeric to string form.
.SH "NOTES"
.IX Header "NOTES"
These functions currently only support IPv4 addresses.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005 ActiveState Software Inc.  All rights reserved.
