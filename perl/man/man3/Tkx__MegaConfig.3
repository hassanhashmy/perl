.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tkx::MegaConfig 3"
.TH Tkx::MegaConfig 3 "2009-11-29" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tkx::MegaConfig \- handle configuration options for megawidgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Foo;
\&  use base qw(Tkx::widget Tkx::MegaConfig);
\&
\&  _\|_PACKAGE_\|_\->_Mega("foo");
\&  _\|_PACKAGE_\|_\->_Config(
\&      \-option  => [$where, $dbName, $dbClass, $default],
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Tkx::MegaConfig\*(C'\fR class provide implementations of \fBm_configure()\fR
and \fBm_cget()\fR that can handle configuration options for megawidgets.
How these methods behave is set up by calling the \fB_Config()\fR class
method.  The \fB_Config()\fR method takes a set option/option spec pairs as
argument.
.PP
An option argument is either the name of an option with leading '\-'
or the string '\s-1DEFAULT\s0' if this spec applies to all option with no
explict spec.
.PP
If there is no '\s-1DEFAULT\s0' then unmatched options are applied directly
to the megawidget root itself.  This is the same behaviour you get if
you specify:
.PP
.Vb 4
\&   _\|_PACKAGE_\|_\->_Config(
\&      ...
\&      DEFAULT => [\*(Aq.\*(Aq],
\&   );
.Ve
.PP
The option spec should be an array reference.  The first element of
the array ($where) describe how this option is handled.  Some \f(CW$where\fR
specs take arguments.  If you need to provide argument replace \f(CW$where\fR
with an array reference containg [$where, \f(CW@args\fR].  The rest of the
option spec specify names and default for the options database, but is
currently ignored (feature unimplemented).
.PP
The following \f(CW$where\fR specs are understood:
.IP ".foo" 4
.IX Item ".foo"
Delegate the given configuration option to the \*(L"foo\*(R" kid of the mega
widget root.  The name \*(L".\*(R" can be used to delegate to the megawidget
root itself.  The name \*(L".*\*(R" can be used to delegate to all kids of the
megawidget root.
.Sp
An argument can be given to delegate using a different
configuration name name on the \*(L"foo\*(R" widget.  Examples:
.Sp
.Vb 4
\&   \-foo => [".inner"],                 # forward \-foo
\&   \-bg  => [[".", "\-background]],      # alias
\&   \-bg2 => [[".inner", "\-background]], # forward as \-background
\&   \-background => [".*"]               # forward \-\-background to kids
.Ve
.IP "\s-1METHOD\s0" 4
.IX Item "METHOD"
Call the _config_\fIopt\fR method.  For \fBm_cget()\fR no arguments are given,
while for \fBm_configure()\fR the new value is passed.  If an extra \f(CW$where\fR
argument is given it will be the method called instead of
_config_\fIopt\fR.  Examples:
.Sp
.Vb 4
\&   _\|_PACKAGE_\|_\->_Config(
\&      \-foo => ["METHOD"];
\&      \-bar => [["METHOD", "bar"]],
\&   }
\&
\&   sub _config_foo {
\&       my $self = shift;
\&       return "foo" unless @_;
\&       print "Ignoring setting configuration option \-foo to \*(Aq$_[0]\*(Aq";
\&   }
\&
\&   sub handle_bar {
\&       my $self = shift;
\&       return "bar" unless @_;
\&       print "Ignoring setting configuration option \-bar to \*(Aq$_[0]\*(Aq";
\&   }
.Ve
.IP "\s-1PASSIVE\s0" 4
.IX Item "PASSIVE"
Store or retrieve option from \f(CW$self\fR\->_data.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Copyright 2005 ActiveState.  All rights reserved.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tkx, Tkx::LabEntry
.PP
Inspiration for this module comes from Tk::ConfigSpecs.
