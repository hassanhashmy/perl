.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::SourceHandler::Executable 3"
.TH TAP::Parser::SourceHandler::Executable 3 "2017-04-06" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::SourceHandler::Executable \- Stream output from an executable TAP source
.SH "VERSION"
.IX Header "VERSION"
Version 3.39
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use TAP::Parser::Source;
\&  use TAP::Parser::SourceHandler::Executable;
\&
\&  my $source = TAP::Parser::Source\->new\->raw([\*(Aq/usr/bin/ruby\*(Aq, \*(Aqmytest.rb\*(Aq]);
\&  $source\->assemble_meta;
\&
\&  my $class = \*(AqTAP::Parser::SourceHandler::Executable\*(Aq;
\&  my $vote  = $class\->can_handle( $source );
\&  my $iter  = $class\->make_iterator( $source );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \fIexecutable\fR TAP::Parser::SourceHandler \- it has 2 jobs:
.PP
1. Figure out if the TAP::Parser::Source it's given is an executable
   command (\*(L"can_handle\*(R").
.PP
2. Creates an iterator for executable commands (\*(L"make_iterator\*(R").
.PP
Unless you're writing a plugin or subclassing TAP::Parser, you
probably won't need to use this module directly.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`can_handle\*(C'\fI\fR
.IX Subsection "can_handle"
.PP
.Vb 1
\&  my $vote = $class\->can_handle( $source );
.Ve
.PP
Only votes if \f(CW$source\fR looks like an executable file. Casts the
following votes:
.PP
.Vb 3
\&  0.9  if it\*(Aqs a hash with an \*(Aqexec\*(Aq key
\&  0.8  if it\*(Aqs a .bat file
\&  0.75 if it\*(Aqs got an execute bit set
.Ve
.PP
\fI\f(CI\*(C`make_iterator\*(C'\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $class\->make_iterator( $source );
.Ve
.PP
Returns a new TAP::Parser::Iterator::Process for the source.
\&\f(CW\*(C`$source\->raw\*(C'\fR must be in one of the following forms:
.PP
.Vb 1
\&  { exec => [ @exec ] }
\&
\&  [ @exec ]
\&
\&  $file
.Ve
.PP
\&\f(CW\*(C`croak\*(C'\fRs on error.
.PP
\fI\f(CI\*(C`iterator_class\*(C'\fI\fR
.IX Subsection "iterator_class"
.PP
The class of iterator to use, override if you're sub-classing.  Defaults
to TAP::Parser::Iterator::Process.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see \*(L"\s-1SUBCLASSING\*(R"\s0 in TAP::Parser for a subclassing overview.
.SS "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyRubySourceHandler;
\&
\&  use strict;
\&
\&  use Carp qw( croak );
\&  use TAP::Parser::SourceHandler::Executable;
\&
\&  use base \*(AqTAP::Parser::SourceHandler::Executable\*(Aq;
\&
\&  # expect $handler\->([\*(Aqmytest.rb\*(Aq, \*(Aqcmdline\*(Aq, \*(Aqargs\*(Aq]);
\&  sub make_iterator {
\&    my ($self, $source) = @_;
\&    my @test_args = @{ $source\->test_args };
\&    my $rb_file   = $test_args[0];
\&    croak("error: Ruby file \*(Aq$rb_file\*(Aq not found!") unless (\-f $rb_file);
\&    return $self\->SUPER::raw_source([\*(Aq/usr/bin/ruby\*(Aq, @test_args]);
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::IteratorFactory,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::Perl,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Handle,
TAP::Parser::SourceHandler::RawTAP
