.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Format::Strptime 3"
.TH DateTime::Format::Strptime 3 "2017-12-24" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::Strptime \- Parse and format strp and strf time patterns
.SH "VERSION"
.IX Header "VERSION"
version 1.75
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use DateTime::Format::Strptime;
\&
\&    my $strp = DateTime::Format::Strptime\->new(
\&        pattern   => \*(Aq%T\*(Aq,
\&        locale    => \*(Aqen_AU\*(Aq,
\&        time_zone => \*(AqAustralia/Melbourne\*(Aq,
\&    );
\&
\&    my $dt = $strp\->parse_datetime(\*(Aq23:16:42\*(Aq);
\&
\&    $strp\->format_datetime($dt);
\&
\&    # 23:16:42
\&
\&    # Croak when things go wrong:
\&    my $strp = DateTime::Format::Strptime\->new(
\&        pattern   => \*(Aq%T\*(Aq,
\&        locale    => \*(Aqen_AU\*(Aq,
\&        time_zone => \*(AqAustralia/Melbourne\*(Aq,
\&        on_error  => \*(Aqcroak\*(Aq,
\&    );
\&
\&    # Do something else when things go wrong:
\&    my $strp = DateTime::Format::Strptime\->new(
\&        pattern   => \*(Aq%T\*(Aq,
\&        locale    => \*(Aqen_AU\*(Aq,
\&        time_zone => \*(AqAustralia/Melbourne\*(Aq,
\&        on_error  => \e&phone_police,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements most of \f(CWstrptime(3)\fR, the \s-1POSIX\s0 function that is the
reverse of \f(CWstrftime(3)\fR, for \f(CW\*(C`DateTime\*(C'\fR. While \f(CW\*(C`strftime\*(C'\fR takes a
\&\f(CW\*(C`DateTime\*(C'\fR and a pattern and returns a string, \f(CW\*(C`strptime\*(C'\fR takes a string and
a pattern and returns the \f(CW\*(C`DateTime\*(C'\fR object associated.
.SH "METHODS"
.IX Header "METHODS"
This class offers the following methods.
.SS "DateTime::Format::Strptime\->new(%args)"
.IX Subsection "DateTime::Format::Strptime->new(%args)"
This methods creates a new object. It accepts the following arguments:
.IP "\(bu" 4
pattern
.Sp
This is the pattern to use for parsing. This is required.
.IP "\(bu" 4
strict
.Sp
This is a boolean which disables or enables strict matching mode.
.Sp
By default, this module turns your pattern into a regex that will match
anywhere in a string. So given the pattern \f(CW\*(C`%Y%m%d%H%M%S\*(C'\fR it will match a
string like \f(CW\*(C`20161214233712Z\*(C'\fR. However, this also means that a this pattern
will match \fBany\fR string that contains 14 or more numbers! This behavior can
be very surprising.
.Sp
If you enable strict mode, then the generated regex is wrapped in boundary
checks of the form \f(CW\*(C`/(?:\eA|\eb)...(?:\eb|\ez_/)\*(C'\fR. These checks ensure that the
pattern will only match when at the beginning or end of a string, or when it
is separated by other text with a word boundary (\f(CW\*(C`\ew\*(C'\fR versus \f(CW\*(C`\eW\*(C'\fR).
.Sp
By default, strict mode is off. This is done for backwards
compatibility. Future releases may turn it on by default, as it produces less
surprising behavior in many cases.
.Sp
Because the default may change in the future, \fByou are strongly encouraged
to explicitly set this when constructing all \f(CB\*(C`DateTime::Format::Strptime\*(C'\fB
objects\fR.
.IP "\(bu" 4
time_zone
.Sp
The default time zone to use for objects returned from parsing.
.IP "\(bu" 4
zone_map
.Sp
Some time zone abbreviations are ambiguous (e.g. \s-1PST, EST, EDT\s0). By default,
the parser will die when it parses an ambiguous abbreviation. You may specify
a \f(CW\*(C`zone_map\*(C'\fR parameter as a hashref to map zone abbreviations however you like:
.Sp
.Vb 1
\&    zone_map => { PST => \*(Aq\-0800\*(Aq, EST => \*(Aq\-0600\*(Aq }
.Ve
.Sp
Note that you can also override non-ambiguous mappings if you want to as well.
.IP "\(bu" 4
locale
.Sp
The locale to use for objects returned from parsing.
.IP "\(bu" 4
on_error
.Sp
This can be one of \f(CW\*(Aqundef\*(Aq\fR (the string, not an \f(CW\*(C`undef\*(C'\fR), 'croak', or a
subroutine reference.
.RS 4
.IP "\(bu" 8
\&'undef'
.Sp
This is the default behavior. The module will return \f(CW\*(C`undef\*(C'\fR on errors. The
error can be accessed using the \f(CW\*(C`$object\->errmsg\*(C'\fR method. This is the
ideal behaviour for interactive use where a user might provide an illegal
pattern or a date that doesn't match the pattern.
.IP "\(bu" 8
\&'croak'
.Sp
The module will croak with an error message on errors.
.IP "\(bu" 8
sub{...} or \e&subname
.Sp
When given a code ref, the module will call that sub on errors. The sub
receives two parameters: the object and the error message.
.Sp
If your sub does not die, then the formatter will continue on as if
\&\f(CW\*(C`on_error\*(C'\fR was \f(CW\*(Aqundef\*(Aq\fR.
.RE
.RS 4
.RE
.ie n .SS "$strptime\->parse_datetime($string)"
.el .SS "\f(CW$strptime\fP\->parse_datetime($string)"
.IX Subsection "$strptime->parse_datetime($string)"
Given a string in the pattern specified in the constructor, this method
will return a new \f(CW\*(C`DateTime\*(C'\fR object.
.PP
If given a string that doesn't match the pattern, the formatter will croak or
return undef, depending on the setting of \f(CW\*(C`on_error\*(C'\fR in the constructor.
.ie n .SS "$strptime\->format_datetime($datetime)"
.el .SS "\f(CW$strptime\fP\->format_datetime($datetime)"
.IX Subsection "$strptime->format_datetime($datetime)"
Given a \f(CW\*(C`DateTime\*(C'\fR object, this methods returns a string formatted in the
object's format. This method is synonymous with \f(CW\*(C`DateTime\*(C'\fR's strftime method.
.ie n .SS "$strptime\->locale"
.el .SS "\f(CW$strptime\fP\->locale"
.IX Subsection "$strptime->locale"
This method returns the locale passed to the object's constructor.
.ie n .SS "$strptime\->pattern"
.el .SS "\f(CW$strptime\fP\->pattern"
.IX Subsection "$strptime->pattern"
This method returns the pattern passed to the object's constructor.
.ie n .SS "$strptime\->time_zone"
.el .SS "\f(CW$strptime\fP\->time_zone"
.IX Subsection "$strptime->time_zone"
This method returns the time zone passed to the object's constructor.
.ie n .SS "$strptime\->errmsg"
.el .SS "\f(CW$strptime\fP\->errmsg"
.IX Subsection "$strptime->errmsg"
If the on_error behavior of the object is 'undef', you can retrieve error
messages with this method so you can work out why things went wrong.
.SH "EXPORTS"
.IX Header "EXPORTS"
These subs are available as optional exports.
.ie n .SS "strptime( $strptime_pattern, $string )"
.el .SS "strptime( \f(CW$strptime_pattern\fP, \f(CW$string\fP )"
.IX Subsection "strptime( $strptime_pattern, $string )"
Given a pattern and a string this function will return a new \f(CW\*(C`DateTime\*(C'\fR
object.
.ie n .SS "strftime( $strftime_pattern, $datetime )"
.el .SS "strftime( \f(CW$strftime_pattern\fP, \f(CW$datetime\fP )"
.IX Subsection "strftime( $strftime_pattern, $datetime )"
Given a pattern and a \f(CW\*(C`DateTime\*(C'\fR object this function will return a
formatted string.
.SH "STRPTIME PATTERN TOKENS"
.IX Header "STRPTIME PATTERN TOKENS"
The following tokens are allowed in the pattern string for strptime
(parse_datetime):
.IP "\(bu" 4
%%
.Sp
The % character.
.IP "\(bu" 4
\&\f(CW%a\fR or \f(CW%A\fR
.Sp
The weekday name according to the given locale, in abbreviated form or
the full name.
.IP "\(bu" 4
\&\f(CW%b\fR or \f(CW%B\fR or \f(CW%h\fR
.Sp
The month name according to the given locale, in abbreviated form or
the full name.
.IP "\(bu" 4
\&\f(CW%c\fR
.Sp
The datetime format according to the given locale.
.IP "\(bu" 4
\&\f(CW%C\fR
.Sp
The century number (0\-99).
.IP "\(bu" 4
\&\f(CW%d\fR or \f(CW%e\fR
.Sp
The day of month (01\-31). This will parse single digit numbers as well.
.IP "\(bu" 4
\&\f(CW%D\fR
.Sp
Equivalent to \f(CW%m\fR/%d/%y. (This is the American style date, very confusing
to non-Americans, especially since \f(CW%d\fR/%m/%y is widely used in Europe.
The \s-1ISO 8601\s0 standard pattern is \f(CW%F\fR.)
.IP "\(bu" 4
\&\f(CW%F\fR
.Sp
Equivalent to \f(CW%Y\fR\-%m\-%d. (This is the \s-1ISO\s0 style date)
.IP "\(bu" 4
\&\f(CW%g\fR
.Sp
The year corresponding to the \s-1ISO\s0 week number, but without the century
(0\-99).
.IP "\(bu" 4
\&\f(CW%G\fR
.Sp
The 4\-digit year corresponding to the \s-1ISO\s0 week number.
.IP "\(bu" 4
\&\f(CW%H\fR
.Sp
The hour (00\-23). This will parse single digit numbers as well.
.IP "\(bu" 4
\&\f(CW%I\fR
.Sp
The hour on a 12\-hour clock (1\-12).
.IP "\(bu" 4
\&\f(CW%j\fR
.Sp
The day number in the year (1\-366).
.IP "\(bu" 4
\&\f(CW%m\fR
.Sp
The month number (01\-12). This will parse single digit numbers as well.
.IP "\(bu" 4
\&\f(CW%M\fR
.Sp
The minute (00\-59). This will parse single digit numbers as well.
.IP "\(bu" 4
\&\f(CW%n\fR
.Sp
Arbitrary whitespace.
.IP "\(bu" 4
\&\f(CW%N\fR
.Sp
Nanoseconds. For other sub-second values use \f(CW\*(C`%[number]N\*(C'\fR.
.IP "\(bu" 4
\&\f(CW%p\fR or \f(CW%P\fR
.Sp
The equivalent of \s-1AM\s0 or \s-1PM\s0 according to the locale in use. See
DateTime::Locale.
.IP "\(bu" 4
\&\f(CW%r\fR
.Sp
Equivalent to \f(CW%I:\fR%M:%S \f(CW%p\fR.
.IP "\(bu" 4
\&\f(CW%R\fR
.Sp
Equivalent to \f(CW%H:\fR%M.
.IP "\(bu" 4
\&\f(CW%s\fR
.Sp
Number of seconds since the Epoch.
.IP "\(bu" 4
\&\f(CW%S\fR
.Sp
The second (0\-60; 60 may occur for leap seconds. See
DateTime::LeapSecond).
.IP "\(bu" 4
\&\f(CW%t\fR
.Sp
Arbitrary whitespace.
.IP "\(bu" 4
\&\f(CW%T\fR
.Sp
Equivalent to \f(CW%H:\fR%M:%S.
.IP "\(bu" 4
\&\f(CW%U\fR
.Sp
The week number with Sunday the first day of the week (0\-53). The first
Sunday of January is the first day of week 1.
.IP "\(bu" 4
\&\f(CW%u\fR
.Sp
The weekday number (1\-7) with Monday = 1. This is the \f(CW\*(C`DateTime\*(C'\fR standard.
.IP "\(bu" 4
\&\f(CW%w\fR
.Sp
The weekday number (0\-6) with Sunday = 0.
.IP "\(bu" 4
\&\f(CW%W\fR
.Sp
The week number with Monday the first day of the week (0\-53). The first
Monday of January is the first day of week 1.
.IP "\(bu" 4
\&\f(CW%x\fR
.Sp
The date format according to the given locale.
.IP "\(bu" 4
\&\f(CW%X\fR
.Sp
The time format according to the given locale.
.IP "\(bu" 4
\&\f(CW%y\fR
.Sp
The year within century (0\-99). When a century is not otherwise specified
(with a value for \f(CW%C\fR), values in the range 69\-99 refer to years in the
twentieth century (1969\-1999); values in the range 00\-68 refer to years in the
twenty-first century (2000\-2068).
.IP "\(bu" 4
\&\f(CW%Y\fR
.Sp
A 4\-digit year, including century (for example, 1991).
.IP "\(bu" 4
\&\f(CW%z\fR
.Sp
An \s-1RFC\-822/ISO 8601\s0 standard time zone specification. (For example
+1100) [See note below]
.IP "\(bu" 4
\&\f(CW%Z\fR
.Sp
The timezone name. (For example \s-1EST\s0 \*(-- which is ambiguous) [See note
below]
.IP "\(bu" 4
\&\f(CW%O\fR
.Sp
This extended token allows the use of Olson Time Zone names to appear
in parsed strings. \fB\s-1NOTE\s0\fR: This pattern cannot be passed to \f(CW\*(C`DateTime\*(C'\fR's
\&\f(CW\*(C`strftime()\*(C'\fR method, but can be passed to \f(CW\*(C`format_datetime()\*(C'\fR.
.SH "AUTHOR EMERITUS"
.IX Header "AUTHOR EMERITUS"
This module was created by Rick Measham.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
http://datetime.perl.org/
.PP
perl, DateTime, DateTime::TimeZone, DateTime::Locale
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-datetime\-format\-strptime@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>. I will be notified, and then you'll automatically be
notified of progress on your bug as I make changes.
.PP
Bugs may be submitted at <https://github.com/houseabsolute/DateTime\-Format\-Strptime/issues>.
.PP
There is a mailing list available for users of this distribution,
<mailto:datetime@perl.org>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for DateTime-Format-Strptime can be found at <https://github.com/houseabsolute/DateTime\-Format\-Strptime>.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module, please
consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of free time
creating free software, and would appreciate any support you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order for me
to continue working on this particular software. I will continue to do so,
inasmuch as I have in the past, for as long as it interests me.
.PP
Similarly, a donation made in this way will probably not make me work on this
software much more, unless I get so many donations that I can consider working
on free software full time (let's all have a chuckle at that together).
.PP
To donate, log into PayPal and send money to autarch@urth.org, or use the
button at <http://www.urth.org/~autarch/fs\-donation.html>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Rick Measham <rickm@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Christian Hansen <chansen@cpan.org>
.IP "\(bu" 4
D. Ilmari Mannsåker <ilmari.mannsaker@net\-a\-porter.com>
.IP "\(bu" 4
key-amb <yasutake.kiyoshi@gmail.com>
.IP "\(bu" 4
Mohammad S Anwar <mohammad.anwar@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 \- 2017 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
