.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::ModInfo 3"
.TH ActiveState::ModInfo 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::ModInfo \- Queries about installed perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::ModInfo qw(list_modules find_module);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "$path = find_inc( $fname )" 4
.el .IP "\f(CW$path\fR = find_inc( \f(CW$fname\fR )" 4
.IX Item "$path = find_inc( $fname )"
.PD 0
.ie n .IP "$path = find_inc( $fname, \e@inc )" 4
.el .IP "\f(CW$path\fR = find_inc( \f(CW$fname\fR, \e@inc )" 4
.IX Item "$path = find_inc( $fname, @inc )"
.PD
Returns the full path to the given \f(CW$fname\fR, or \f(CW\*(C`undef\*(C'\fR if not found.
.ie n .IP "$path = find_module( $mod )" 4
.el .IP "\f(CW$path\fR = find_module( \f(CW$mod\fR )" 4
.IX Item "$path = find_module( $mod )"
.PD 0
.ie n .IP "$path = find_module( $mod, \e@inc )" 4
.el .IP "\f(CW$path\fR = find_module( \f(CW$mod\fR, \e@inc )" 4
.IX Item "$path = find_module( $mod, @inc )"
.PD
Returns the full path to the given module, or \f(CW\*(C`undef\*(C'\fR if not found.
.ie n .IP "$mod = fixup_module_case( $mod, %opts )" 4
.el .IP "\f(CW$mod\fR = fixup_module_case( \f(CW$mod\fR, \f(CW%opts\fR )" 4
.IX Item "$mod = fixup_module_case( $mod, %opts )"
Will for instance change \*(L"html::parser\*(R" into \*(L"HTML::Parser\*(R".  If
multiple mappings are possible return \f(CW$mod\fR unchanged.  The \f(CW$mod\fR is
also returned unchanged if the module can't be located.
.Sp
The following options are recognized:
.RS 4
.ie n .IP """inc"" => \e@list" 4
.el .IP "\f(CWinc\fR => \e@list" 4
.IX Item "inc => @list"
A list of directories to search for modules.  If not provided it
defaults to all the \f(CW@INC\fR.
.ie n .IP """prefix_only"" => $bool" 4
.el .IP "\f(CWprefix_only\fR => \f(CW$bool\fR" 4
.IX Item "prefix_only => $bool"
If true assume \f(CW$mod\fR to just be a namespace.  Will just look for
matching directory names, not an actual \fI.pm\fR file.
.RE
.RS 4
.RE
.ie n .IP "$mod = fname2mod( $fname )" 4
.el .IP "\f(CW$mod\fR = fname2mod( \f(CW$fname\fR )" 4
.IX Item "$mod = fname2mod( $fname )"
Convert an fname to a module module name.  The function might return
\&\f(CW\*(C`undef\*(C'\fR if the given \f(CW$fname\fR does not represent a perl module.
.ie n .IP "%modules = list_modules( %opt )" 4
.el .IP "\f(CW%modules\fR = list_modules( \f(CW%opt\fR )" 4
.IX Item "%modules = list_modules( %opt )"
This function will locate all modules (.pm files) and return a list of
module\-name/file\-location pairs.
.Sp
The following options are recognized:
.RS 4
.ie n .IP """inc"" => \e@list" 4
.el .IP "\f(CWinc\fR => \e@list" 4
.IX Item "inc => @list"
A list of directories to search for modules.  If not provided it
defaults to all the \f(CW@INC\fR entries that point inside the perl
installation directory ($Config{prefix}).
.ie n .IP """maxdepth"" => $n" 4
.el .IP "\f(CWmaxdepth\fR => \f(CW$n\fR" 4
.IX Item "maxdepth => $n"
When to give up when traversing directories, i.e. how many \*(L"::\*(R"s to
allow in the module name.  The default is 6.  A value of 0 indicate no
limit.
.ie n .IP """allowdup"" => $bool" 4
.el .IP "\f(CWallowdup\fR => \f(CW$bool\fR" 4
.IX Item "allowdup => $bool"
If true return all occurrences or any given module.  If this option is
false or not provided, only the first occurrence of any given module
when traversing \f(CW\*(C`inc\*(C'\fR will be returned.  This should also be the
module that perl would pick up if \f(CW@INC\fR as the given \f(CW\*(C`inc\*(C'\fR.
.ie n .IP """namespace"" => $ns" 4
.el .IP "\f(CWnamespace\fR => \f(CW$ns\fR" 4
.IX Item "namespace => $ns"
Only modules in the given namespace is returned.  If \f(CW$ns\fR ends with
\&\*(L"::\*(R" only submodules of the given namespace is returned.
.RE
.RS 4
.RE
.ie n .IP "$fname = mod2fname( $mod )" 4
.el .IP "\f(CW$fname\fR = mod2fname( \f(CW$mod\fR )" 4
.IX Item "$fname = mod2fname( $mod )"
Convert a module name to an fname.
.ie n .IP "$fh = open_inc( $fname )" 4
.el .IP "\f(CW$fh\fR = open_inc( \f(CW$fname\fR )" 4
.IX Item "$fh = open_inc( $fname )"
.PD 0
.ie n .IP "$fh = open_inc( $fname, \e@inc )" 4
.el .IP "\f(CW$fh\fR = open_inc( \f(CW$fname\fR, \e@inc )" 4
.IX Item "$fh = open_inc( $fname, @inc )"
.PD
Returns an opened file handle for the given fname, or \f(CW\*(C`undef\*(C'\fR if not
found.  Slightly more efficient than using the standard \fBopen()\fR
function on the path returned by \fBfind_inc()\fR, but otherwise just the
same.  The file is opened in read-only mode.
.ie n .IP "$fh = open_module( $mod )" 4
.el .IP "\f(CW$fh\fR = open_module( \f(CW$mod\fR )" 4
.IX Item "$fh = open_module( $mod )"
.PD 0
.ie n .IP "$fh = open_module( $mod, \e@inc )" 4
.el .IP "\f(CW$fh\fR = open_module( \f(CW$mod\fR, \e@inc )" 4
.IX Item "$fh = open_module( $mod, @inc )"
.PD
Returns an opened file handle for the given module, or \f(CW\*(C`undef\*(C'\fR if not found.
.ie n .IP "$vers = parse_version( $filename )" 4
.el .IP "\f(CW$vers\fR = parse_version( \f(CW$filename\fR )" 4
.IX Item "$vers = parse_version( $filename )"
Return the \f(CW$VERSION\fR of a module using the official ExtUtils::MakeMaker
algorithm.  This is a slightly modified copy of the MakeMaker
function.  The main difference is that it returns a real \f(CW\*(C`undef\*(C'\fR if
no version number is found and do it without producing any warning.
.ie n .IP "($module, $vers) = module_version( $filename )" 4
.el .IP "($module, \f(CW$vers\fR) = module_version( \f(CW$filename\fR )" 4
.IX Item "($module, $vers) = module_version( $filename )"
Return the module name and its version number from a file.
.SH "BUGS"
.IX Header "BUGS"
none.
