.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Package::Constants 3"
.TH Package::Constants 3 "2014-12-24" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Package::Constants \- List all constants declared in a package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Package::Constants;
\&
\&    ### list the names of all constants in a given package;
\&    @const = Package::Constants\->list( _\|_PACKAGE_\|_ );
\&    @const = Package::Constants\->list( \*(Aqmain\*(Aq );
\&
\&    ### enable debugging output
\&    $Package::Constants::DEBUG = 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Package::Constants\*(C'\fR lists all the constants defined in a certain
package. This can be useful for, among others, setting up an
autogenerated \f(CW\*(C`@EXPORT/@EXPORT_OK\*(C'\fR for a Constants.pm file.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .SS "@const = Package::Constants\->list( \s-1PACKAGE_NAME\s0 );"
.el .SS "\f(CW@const\fP = Package::Constants\->list( \s-1PACKAGE_NAME\s0 );"
.IX Subsection "@const = Package::Constants->list( PACKAGE_NAME );"
Lists the names of all the constants defined in the provided package.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.ie n .SS "$Package::Constants::DEBUG"
.el .SS "\f(CW$Package::Constants::DEBUG\fP"
.IX Subsection "$Package::Constants::DEBUG"
When set to true, prints out debug information to \s-1STDERR\s0 about the
package it is inspecting. Helps to identify issues when the results
are not as you expect.
.PP
Defaults to false.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Functions \- get a list of all the public functions defined in a package.
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-package\-constants@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
