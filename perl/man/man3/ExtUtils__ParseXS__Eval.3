.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ExtUtils::ParseXS::Eval 3"
.TH ExtUtils::ParseXS::Eval 3 "2017-07-31" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::ParseXS::Eval \- Clean package to evaluate code in
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use ExtUtils::ParseXS::Eval;
\&  my $rv = ExtUtils::ParseXS::Eval::eval_typemap_code(
\&    $parsexs_obj, "some Perl code"
\&  );
.Ve
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .SS "$pxs\->eval_output_typemap_code($typemapcode, $other_hashref)"
.el .SS "\f(CW$pxs\fP\->eval_output_typemap_code($typemapcode, \f(CW$other_hashref\fP)"
.IX Subsection "$pxs->eval_output_typemap_code($typemapcode, $other_hashref)"
Sets up various bits of previously global state
(formerly ExtUtils::ParseXS package variables)
for eval'ing output typemap code that may refer to these
variables.
.PP
Warns the contents of \f(CW$@\fR if any.
.PP
Not all these variables are necessarily considered \*(L"public\*(R" wrt. use in
typemaps, so beware. Variables set up from the ExtUtils::ParseXS object:
.PP
.Vb 1
\&  $Package $Alias $func_name $Full_func_name $pname
.Ve
.PP
Variables set up from \f(CW$other_hashref\fR:
.PP
.Vb 1
\&  $var $type $ntype $subtype $arg
.Ve
.ie n .SS "$pxs\->eval_input_typemap_code($typemapcode, $other_hashref)"
.el .SS "\f(CW$pxs\fP\->eval_input_typemap_code($typemapcode, \f(CW$other_hashref\fP)"
.IX Subsection "$pxs->eval_input_typemap_code($typemapcode, $other_hashref)"
Sets up various bits of previously global state
(formerly ExtUtils::ParseXS package variables)
for eval'ing output typemap code that may refer to these
variables.
.PP
Warns the contents of \f(CW$@\fR if any.
.PP
Not all these variables are necessarily considered \*(L"public\*(R" wrt. use in
typemaps, so beware. Variables set up from the ExtUtils::ParseXS object:
.PP
.Vb 1
\&  $Package $Alias $func_name $Full_func_name $pname
.Ve
.PP
Variables set up from \f(CW$other_hashref\fR:
.PP
.Vb 1
\&  $var $type $ntype $subtype $num $init $printed_name $arg $argoff
.Ve
.SH "TODO"
.IX Header "TODO"
Eventually, with better documentation and possible some cleanup,
this could be part of \f(CW\*(C`ExtUtils::Typemaps\*(C'\fR.
