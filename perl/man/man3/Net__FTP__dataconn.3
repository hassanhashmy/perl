.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::FTP::dataconn 3"
.TH Net::FTP::dataconn 3 "2017-11-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::FTP::dataconn \- FTP Client data connection class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Some of the methods defined in \f(CW\*(C`Net::FTP\*(C'\fR return an object which will
be derived from this class. The dataconn class itself is derived from
the \f(CW\*(C`IO::Socket::INET\*(C'\fR class, so any normal \s-1IO\s0 operations can be performed.
However the following methods are defined in the dataconn class and \s-1IO\s0 should
be performed using these.
.IP "read ( \s-1BUFFER, SIZE\s0 [, \s-1TIMEOUT\s0 ] )" 4
.IX Item "read ( BUFFER, SIZE [, TIMEOUT ] )"
Read \f(CW\*(C`SIZE\*(C'\fR bytes of data from the server and place it into \f(CW\*(C`BUFFER\*(C'\fR, also
performing any <\s-1CRLF\s0> translation necessary. \f(CW\*(C`TIMEOUT\*(C'\fR is optional, if not
given, the timeout value from the command connection will be used.
.Sp
Returns the number of bytes read before any <\s-1CRLF\s0> translation.
.IP "write ( \s-1BUFFER, SIZE\s0 [, \s-1TIMEOUT\s0 ] )" 4
.IX Item "write ( BUFFER, SIZE [, TIMEOUT ] )"
Write \f(CW\*(C`SIZE\*(C'\fR bytes of data from \f(CW\*(C`BUFFER\*(C'\fR to the server, also
performing any <\s-1CRLF\s0> translation necessary. \f(CW\*(C`TIMEOUT\*(C'\fR is optional, if not
given, the timeout value from the command connection will be used.
.Sp
Returns the number of bytes written before any <\s-1CRLF\s0> translation.
.IP "bytes_read ()" 4
.IX Item "bytes_read ()"
Returns the number of bytes read so far.
.IP "abort ()" 4
.IX Item "abort ()"
Abort the current data transfer.
.IP "close ()" 4
.IX Item "close ()"
Close the data connection and get a response from the \s-1FTP\s0 server. Returns
\&\fItrue\fR if the connection was closed successfully and the first digit of
the response from the server was a '2'.
