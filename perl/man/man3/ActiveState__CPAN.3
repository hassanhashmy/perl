.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::CPAN 3"
.TH ActiveState::CPAN 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::CPAN \- Get information and files from CPAN
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use ActiveState::CPAN ();
\& my $cpan = ActiveState::CPAN\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ActiveState::CPAN provides an interface for fetching files off \s-1CPAN\s0
and for extracting information from the various meta and index files.
The following methods are provided:
.ie n .IP "$cpan = ActiveState::CPAN\->new( %options )" 4
.el .IP "\f(CW$cpan\fR = ActiveState::CPAN\->new( \f(CW%options\fR )" 4
.IX Item "$cpan = ActiveState::CPAN->new( %options )"
This constructs a new ActiveState::CPAN object.  The following options are recognized:
.RS 4
.ie n .IP "mirror => $url_or_path" 4
.el .IP "mirror => \f(CW$url_or_path\fR" 4
.IX Item "mirror => $url_or_path"
Give the \s-1URL\s0 of the \s-1CPAN\s0 mirror to fetch files from.  The module works
best with a local \s-1CPAN\s0 mirror and this option might also be given as a
path to the local mirror.  If not provided, then the \s-1CPAN_ROOT\s0
environment variable is consulted, and finally a set of hardcoded URLs
are used.
.ie n .IP "cache => $path" 4
.el .IP "cache => \f(CW$path\fR" 4
.IX Item "cache => $path"
The cache is a directory containing a partial mirror of \s-1CPAN.\s0  If
files are requested from remote mirrors or backpan they will be stored
in the cache and served back from here the next time they are
requested.
.Sp
You need to specify a cache if you rely on \f(CW$cpan\fR\->\fBget_file()\fR to return
file system path names for all \s-1CPAN\s0 paths.
.ie n .IP "backpan => $url" 4
.el .IP "backpan => \f(CW$url\fR" 4
.IX Item "backpan => $url"
Give the \s-1URL\s0 of the backpan server to use to fetch files that have
expired from \s-1CPAN.\s0  The default is \*(L"http://backpan.cpantesters.org/\*(R".
.Sp
An explict \f(CW\*(C`undef\*(C'\fR can be passed to disable the fallback
on Backpan.
.ie n .IP "verbose => $bool" 4
.el .IP "verbose => \f(CW$bool\fR" 4
.IX Item "verbose => $bool"
If \s-1TRUE\s0 print trace messages to \s-1STDOUT\s0 about operations are taken,
like downloads from remote servers.  Default is \s-1TRUE.\s0
.RE
.RS 4
.RE
.ie n .IP "$cpan\->clear_cache" 4
.el .IP "\f(CW$cpan\fR\->clear_cache" 4
.IX Item "$cpan->clear_cache"
This will delete all the files in the cache directory.  Use with care.
This is a noop if you did not pass the \f(CW\*(C`cache\*(C'\fR option to the
constructor.
.ie n .IP "$cpan\->local_mirror" 4
.el .IP "\f(CW$cpan\fR\->local_mirror" 4
.IX Item "$cpan->local_mirror"
Returns the file system path to the local mirror used.  Returns
\&\f(CW\*(C`undef\*(C'\fR if there is no local mirror.
.ie n .IP "$cpan\->author( $author_id )" 4
.el .IP "\f(CW$cpan\fR\->author( \f(CW$author_id\fR )" 4
.IX Item "$cpan->author( $author_id )"
Returns the email alias for the given \s-1CPAN\s0 author.  The alias is on the form:
.Sp
.Vb 1
\&    Gisle Aas <gisle@aas.no>
.Ve
.ie n .IP "$cpan\->authors" 4
.el .IP "\f(CW$cpan\fR\->authors" 4
.IX Item "$cpan->authors"
Returns a reference to a hash that maps author ids to email aliases.
.ie n .IP "$cpan\->packages( %opt )" 4
.el .IP "\f(CW$cpan\fR\->packages( \f(CW%opt\fR )" 4
.IX Item "$cpan->packages( %opt )"
This returns the list of packages on \s-1CPAN.\s0  The packages are returned
as a reference to a hash with the following keys:
.RS 4
.IP "name" 4
.IX Item "name"
This is the bare name of the package.  It's a string like \*(L"libwww-perl\*(R".
.IP "version" 4
.IX Item "version"
This is the version number of the package.  It's a string like \*(L"5.812\*(R".
.IP "maturity" 4
.IX Item "maturity"
The maturity of the distribution. This will be either \*(L"released\*(R" or \*(L"developer\*(R".
.IP "author" 4
.IX Item "author"
This is the \s-1CPAN\s0 author id owning the package.  It's a string like \*(L"\s-1GAAS\*(R".\s0
.IP "extension" 4
.IX Item "extension"
This is the file suffix of the package file.  It's a string like \*(L"tar.gz\*(R"
.IP "path" 4
.IX Item "path"
This is the \s-1CPAN\s0 relative path of the package file.  It's a string
like \*(L"authors/id/G/GA/GAAS/libwww\-perl\-5.812.tar.gz\*(R".
.RE
.RS 4
.Sp
The passed in options determine what packages are returned.  The
recognized options are:
.IP "indexed => 1" 4
.IX Item "indexed => 1"
If passed with a \s-1TRUE\s0 value only list packages with indexed
modules (as determined by the \s-1CPAN\s0 indexer).
.IP "recent => 1" 4
.IX Item "recent => 1"
The most recently uploaded packages are returned first.
.RE
.RS 4
.RE
.ie n .IP "$cpan\->packages_iter( %opt )" 4
.el .IP "\f(CW$cpan\fR\->packages_iter( \f(CW%opt\fR )" 4
.IX Item "$cpan->packages_iter( %opt )"
This returns an iterator that returns the packages on \s-1CPAN.\s0  The
iterator returns the name, version, maturity, author, extension and
path of the package.  In scalar context the path is returned.
.Sp
The recognized options are the same as for \fBpackages()\fR described above.
.ie n .IP "$cpan\->package_info( $path )" 4
.el .IP "\f(CW$cpan\fR\->package_info( \f(CW$path\fR )" 4
.IX Item "$cpan->package_info( $path )"
Returns a hash reference like the ones that \fBpackage()\fR returns.  In
list context it returns separate values like package iterator does.
.ie n .IP "$cpan\->\fBmodules_iter()\fR" 4
.el .IP "\f(CW$cpan\fR\->\fBmodules_iter()\fR" 4
.IX Item "$cpan->modules_iter()"
This returns an iterator that returns the indexed modules on \s-1CPAN.\s0 The
iterator returns module name, module version and the \s-1CPAN\s0 relative
package path.  In scalar context the module name is returned.
.ie n .IP "$cpan\->files( %opt )" 4
.el .IP "\f(CW$cpan\fR\->files( \f(CW%opt\fR )" 4
.IX Item "$cpan->files( %opt )"
This returns the list of path names of the files on \s-1CPAN.\s0  Symlinks
are not returned.  The options passed in can be used to select what
path names are returned.  The recognized options are:
.RS 4
.IP "matching => qr/.../" 4
.IX Item "matching => qr/.../"
Only list path names that match the given regular expression.
.IP "package => 1" 4
.IX Item "package => 1"
If passed with a \s-1TRUE\s0 value only list package files, also called \s-1CPAN\s0
distributions.  These have normally names that end in \fI.tar.gz\fR.
.ie n .IP "author => $author_id" 4
.el .IP "author => \f(CW$author_id\fR" 4
.IX Item "author => $author_id"
Only list files uploaded by the given \s-1CPAN\s0 author.  The \f(CW$author_id\fR is
a string like \*(L"\s-1GAAS\*(R".\s0
.ie n .IP "order_by => $field" 4
.el .IP "order_by => \f(CW$field\fR" 4
.IX Item "order_by => $field"
.PD 0
.ie n .IP "order_by => ""$field desc""" 4
.el .IP "order_by => ``$field desc''" 4
.IX Item "order_by => $field desc"
.PD
Return the files sorted by the given field, which can be one of
\&\*(L"path\*(R", \*(L"size\*(R", \*(L"mtime\*(R".  Append the string \*(L" desc\*(R" to the field name
to sort in descending order.  For example:
.Sp
.Vb 1
\&   order_by => "mtime desc"
.Ve
.Sp
will return the most recently uploaded files first.
.RE
.RS 4
.RE
.ie n .IP "$cpan\->files_iter( %opt )" 4
.el .IP "\f(CW$cpan\fR\->files_iter( \f(CW%opt\fR )" 4
.IX Item "$cpan->files_iter( %opt )"
This returns an iterator that returns the files on \s-1CPAN.\s0 Symlinks are
not returned.  The iterator returns the path name, the size and the
last modified timestamp.  In scalar context only the path name is returned.
.Sp
The recognized options are the same as for \fBfiles()\fR described above.
.Sp
The timestamp is in \s-1ISO 8601\s0 compact format: YYYYMMDDThhmmss (with a literal \*(L"T\*(R").
.ie n .IP "$cpan\->get( $path )" 4
.el .IP "\f(CW$cpan\fR\->get( \f(CW$path\fR )" 4
.IX Item "$cpan->get( $path )"
Returns the full content of the given file or undef if the file can't
be found.  Compressed files are automatically uncompressed.
.ie n .IP "$cpan\->get_file( $path )" 4
.el .IP "\f(CW$cpan\fR\->get_file( \f(CW$path\fR )" 4
.IX Item "$cpan->get_file( $path )"
Returns the file sytem path that corresponds to the given \s-1CPAN\s0 path.
This will either be the path to a local \s-1CPAN\s0 mirror or a path within
the cache.  If there is no cache configured, then this function might
return \f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$cpan\->open( $path )" 4
.el .IP "\f(CW$cpan\fR\->open( \f(CW$path\fR )" 4
.IX Item "$cpan->open( $path )"
Opens the given \s-1CPAN\s0 file and returns a file handle to it.  Croaks if
the file can't be found or opened.  Compressed files are automatically
uncompressed.
.ie n .IP "$cpan\->unpack( $path )" 4
.el .IP "\f(CW$cpan\fR\->unpack( \f(CW$path\fR )" 4
.IX Item "$cpan->unpack( $path )"
.PD 0
.ie n .IP "$cpan\->unpack( $path, $dir )" 4
.el .IP "\f(CW$cpan\fR\->unpack( \f(CW$path\fR, \f(CW$dir\fR )" 4
.IX Item "$cpan->unpack( $path, $dir )"
.PD
Will unpack a \s-1CPAN\s0 package to the given directory.  If \f(CW$dir\fR isn't
provided it defaults to the basename of \f(CW$path\fR.  It returns the path to
the unpacked directory ($dir) and croaks if it gets into trouble.
.SS "Iterators"
.IX Subsection "Iterators"
The methods with names that end with \f(CW\*(C`_iter\*(C'\fR return iterators.
Iterators are functions that return the next element in a sequence
each time they are called, and return nothing once the sequence is
exhausted.  Example usage:
.PP
.Vb 4
\&    my $next = $cpan\->files_iter(author => "GAAS", package => 1);
\&    while (my($path, $size, $mtime) = $next\->()) {
\&        print "$path $size $mtime\en";
\&    }
.Ve
.PP
More information about iterators at Iterator::Simple.  This module
also contains some utilities for wrapping and combining iterators.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
If the \s-1CPAN_ROOT\s0 environment variable is set it will be used as the
primary mirror.  It can be an \s-1URL\s0 or the name of a directory.
.SH "BUGS"
.IX Header "BUGS"
none.
