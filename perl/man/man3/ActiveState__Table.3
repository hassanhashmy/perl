.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Table 3"
.TH ActiveState::Table 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Table \- Simple table class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& $t = ActiveState::Table\->new;
\& $t\->add_row({ a => 1, b => 2 });
\& print $t\->as_csv;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Instances of the \f(CW\*(C`ActiveState::Table\*(C'\fR class represent a 2 dimensional
table of fields (or columns if you wish) and rows.  The fields are
ordered and have case-sensitive names. The rows are numbered.
.PP
The following methods are provided:
.ie n .IP "$t = ActiveState::Table\->new" 4
.el .IP "\f(CW$t\fR = ActiveState::Table\->new" 4
.IX Item "$t = ActiveState::Table->new"
This creates a new empty table object.
.ie n .IP "$t\->fields" 4
.el .IP "\f(CW$t\fR\->fields" 4
.IX Item "$t->fields"
This returns the current field names.  In scalar context it returns
the number of fields.
.ie n .IP "$t\->rows" 4
.el .IP "\f(CW$t\fR\->rows" 4
.IX Item "$t->rows"
This returns the current rows.  Each row is returned as reference to an
array of values in the same order as the fields. The array might be
shorter than the number of fields, when the trailing values are \f(CW\*(C`undef\*(C'\fR.
.Sp
In scalar context it returns the number of rows in the table.
.ie n .IP "$t\->fetchrow( $index )" 4
.el .IP "\f(CW$t\fR\->fetchrow( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow( $index )"
This returns the given row.  An array reference is returned in scalar
context.  The array might be shorter than the number of fields, when
the trailing values are \f(CW\*(C`undef\*(C'\fR.
.Sp
In list context the values are returned one by one.  There will be as
many values as there are fields in the table.  Some values might be
\&\f(CW\*(C`undef\*(C'\fR.
.Sp
If there is no row with the given \f(CW$index\fR, then \f(CW\*(C`undef\*(C'\fR is returned in
scalar context and the empty list in list context.
.ie n .IP "$t\->fetchrow_arrayref( $index )" 4
.el .IP "\f(CW$t\fR\->fetchrow_arrayref( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow_arrayref( $index )"
Same as \fBfetchrow()\fR but will return an array reference even in list
context.
.ie n .IP "$t\->fetchrow_hashref( $index )" 4
.el .IP "\f(CW$t\fR\->fetchrow_hashref( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow_hashref( $index )"
This returns the given row.  A hash reference is returned with keys
corresponding to the field names and the values corresponding to the
given row.  The values might be \f(CW\*(C`undef\*(C'\fR, but a key for all the fields
will exist.
.Sp
If there is no row with the given \f(CW$index\fR, then \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP "$t\->add_field( $field )" 4
.el .IP "\f(CW$t\fR\->add_field( \f(CW$field\fR )" 4
.IX Item "$t->add_field( $field )"
This adds another field to the table.  The field must be a string.  If
the field already exists it is not added again, and the \fBadd_field()\fR
call does nothing.
.Sp
There is no return value.
.ie n .IP "$t\->add_row( $row )" 4
.el .IP "\f(CW$t\fR\->add_row( \f(CW$row\fR )" 4
.IX Item "$t->add_row( $row )"
This adds another row to the table.  The row must currently be a hash
reference.  If the hash contains new fields they are added
automatically in sorted order.  To enforce an order add the fields
before adding rows.
.Sp
There is no return value.
.ie n .IP "$t\->add_sep" 4
.el .IP "\f(CW$t\fR\->add_sep" 4
.IX Item "$t->add_sep"
.PD 0
.ie n .IP "$t\->add_sep( $index )" 4
.el .IP "\f(CW$t\fR\->add_sep( \f(CW$index\fR )" 4
.IX Item "$t->add_sep( $index )"
.PD
This adds a separator to the table, shown as a horizonal line in the
\&\fBas_box()\fR output.  If \f(CW$index\fR is provided the separator will appear
after the given row, otherwise the separator will appear after last
row added.
.ie n .IP "$t\->sort( $comparator )" 4
.el .IP "\f(CW$t\fR\->sort( \f(CW$comparator\fR )" 4
.IX Item "$t->sort( $comparator )"
This will sort the rows of the table using the given \f(CW$comparator\fR
function to compare elements.  The \f(CW$comparator\fR is called as for perl's
builtin sort function.  References to the rows to compare is available
in \f(CW$::a\fR and \f(CW$::b\fR in the form returned by
\&\f(CW\*(C`$t\->fetchrow_arrayref\*(C'\fR.
.ie n .IP "$t\->as_box( %options )" 4
.el .IP "\f(CW$t\fR\->as_box( \f(CW%options\fR )" 4
.IX Item "$t->as_box( %options )"
This formats the table as text and returns it. The following options
might be provided as key/value pairs:
.Sp
.Vb 9
\&   name                 | default
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-
\&   align                | {}
\&   null                 | "NULL"
\&   show_header          | 1
\&   show_trailer         | 1
\&   box_chars            | "ascii"
\&   max_width            | undef
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-
.Ve
.Sp
The \f(CW\*(C`align\*(C'\fR option is a hash with field names as keys and the strings
\&\*(L"left\*(R", \*(L"right\*(R" or \*(L"center\*(R" as values.  Alignment for fields not found
in this hash is \*(L"left\*(R".
.Sp
The \f(CW\*(C`box_chars\*(C'\fR is either the name of a box drawing scheme or the 11
characters to use; starting with the upper left corner and going down
one row at a time to the lower right corner, and finally the
horizontal and vertical line character.  The current named schemes are
\&\*(L"dos\*(R" and \*(L"unicode\*(R".
.Sp
If \f(CW\*(C`max_width\*(C'\fR is specified it limits how wide the box can get.  The
longest fields are truncated until the box is no wider than the
given number of characters.  Truncated fields are shown with trailing
\&\*(L"...\*(R" or \*(L"+\*(R" marker.
.ie n .IP "$t\->as_csv( %options )" 4
.el .IP "\f(CW$t\fR\->as_csv( \f(CW%options\fR )" 4
.IX Item "$t->as_csv( %options )"
This formats the table as a \s-1CSV\s0 file (\*(L"comma-separated-values\*(R") and
returns it.  The following options might be provided as key/value
pairs:
.Sp
.Vb 7
\&   name                 | default
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-
\&   field_separator      | ","
\&   row_separator        | "\en"
\&   null                 | "NULL"
\&   show_header          | 1
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-
.Ve
.Sp
Fields that contains the \f(CW\*(C`field_separator\*(C'\fR or the quote character
will be quoted.
.SH "BUGS"
.IX Header "BUGS"
none.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1RFC 4180\s0 and <http://en.wikipedia.org/wiki/Comma\-separated_values>
