.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Unix::ProcInfo 3"
.TH ActiveState::Unix::ProcInfo 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Unix::ProcInfo \- Portable extraction of process info
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use ActiveState::Unix::ProcInfo qw(proc_info);
\& my $info = proc_info(root_pid => $$);
\& # examine $info
\&
\& for my $p (proc_info()) {
\&     print "$p\->{pid} $p\->{vsz} $p\->{args}\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a single function called \fBproc_info()\fR that is a
portable wrapper around the system's \f(CW\*(C`ps\*(C'\fR command.  The function
takes the following key/value arguments:
.ie n .IP "root_pid => $pid" 4
.el .IP "root_pid => \f(CW$pid\fR" 4
.IX Item "root_pid => $pid"
.PD 0
.ie n .IP "root_pid => [$pid1, $pid2,...]" 4
.el .IP "root_pid => [$pid1, \f(CW$pid2\fR,...]" 4
.IX Item "root_pid => [$pid1, $pid2,...]"
.PD
Only processes with the given \s-1PID\s0 (or PIDs) and their descendants are
selected.
.IP "root_args_match => qr/.../" 4
.IX Item "root_args_match => qr/.../"
Only processes and their descendants who's command line matches the 
regular expression are selected.
.Sp
Note that this might not match as expected on platforms where \f(CW\*(C`args\*(C'\fR
is truncated, see the description of \f(CW\*(C`args\*(C'\fR below.
.PP
If no arguments are given, information about all
processes on the system is returned.
.PP
In scalar context a hash reference is returned.  The keys of this hash
are the PIDs of the processes selected and the value is a hash with the
following elements:
.ie n .IP """ppid""" 4
.el .IP "\f(CWppid\fR" 4
.IX Item "ppid"
The \s-1PID\s0 of the parent of this process.
.ie n .IP """vsz""" 4
.el .IP "\f(CWvsz\fR" 4
.IX Item "vsz"
The size of the process in virtual memory in 1024 byte units.
.ie n .IP """rss""" 4
.el .IP "\f(CWrss\fR" 4
.IX Item "rss"
The size of the process in physical memory in 1024 byte units.
.ie n .IP """args""" 4
.el .IP "\f(CWargs\fR" 4
.IX Item "args"
The command with its arguments as a single string.  The command and
arguments are separated by space.  The string might be truncated.
.Sp
On Solaris it is truncated to the first 80 chars.  On HP-UX it is
truncated to the first 60 chars.  On Linux the limit appears to be 4096.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
The number of threads running in this process.  This field might be
missing for systems where the thread count can't be determined.
.ie n .IP """children""" 4
.el .IP "\f(CWchildren\fR" 4
.IX Item "children"
The number of direct children of this process.
.ie n .IP """descendants""" 4
.el .IP "\f(CWdescendants\fR" 4
.IX Item "descendants"
The number of children + grand-children + grand-grand-children + ...
.PP
In list context a list of hash references are returned, each one
representing a single process.  The hash has the same fields as
described above, plus a \f(CW\*(C`pid\*(C'\fR field.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ps
