.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Format::Builder::Parser::generic 3"
.TH DateTime::Format::Builder::Parser::generic 3 "2013-04-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::Builder::Parser::generic \- Useful routines
.SH "VERSION"
.IX Header "VERSION"
version 0.81
.SH "METHODS"
.IX Header "METHODS"
.SS "Useful"
.IX Subsection "Useful"
\fInew\fR
.IX Subsection "new"
.PP
Standard constructor. Returns a blessed hash; any arguments are placed
in the hash. This is useful for storing information between methods.
.PP
\fIgeneric_parser\fR
.IX Subsection "generic_parser"
.PP
This is a method provided solely for the benefit of
\&\f(CW\*(C`Parser\*(C'\fR implementations. It semi-neatly abstracts
a lot of the work involved.
.PP
Basically, it takes parameters matching the assorted
callbacks from the parser declarations and makes a coderef
out of it all.
.PP
Currently recognized callbacks are:
.IP "\(bu" 4
on_match
.IP "\(bu" 4
on_fail
.IP "\(bu" 4
preprocess
.IP "\(bu" 4
postprocess
.SS "Methods for subclassing"
.IX Subsection "Methods for subclassing"
These are methods you should define when writing your own subclass.
.PP
\&\fBNote\fR: these methods do not exist in this class. There is no point
trying to call \f(CW\*(C`$self\->SUPER::do_match( ... )\*(C'\fR.
.PP
\fIdo_match\fR
.IX Subsection "do_match"
.PP
\&\f(CW\*(C`do_match\*(C'\fR is the first phase. Arguments are the date and \f(CW@args\fR.
\&\f(CW\*(C`self\*(C'\fR, \f(CW\*(C`label\*(C'\fR, \f(CW\*(C`args\*(C'\fR. Return value must be defined if you match
successfully.
.PP
\fIpost_match\fR
.IX Subsection "post_match"
.PP
\&\f(CW\*(C`post_match\*(C'\fR is called after the appropriate callback out of
\&\f(CW\*(C`on_match\*(C'\fR/\f(CW\*(C`on_fail\*(C'\fR is done. It's passed the date, the return
value from \f(CW\*(C`do_match\*(C'\fR and the parsing hash.
.PP
Its return value is used as the \f(CW\*(C`post\*(C'\fR argument to the \f(CW\*(C`postprocess\*(C'\fR
callback, and as the second argument to \f(CW\*(C`make\*(C'\fR.
.PP
\fImake\fR
.IX Subsection "make"
.PP
\&\f(CW\*(C`make\*(C'\fR takes the original input, the return value from \f(CW\*(C`post_match\*(C'\fR
and the parsing hash and should return a \f(CW\*(C`DateTime\*(C'\fR object or
undefined.
.SS "Delegations"
.IX Subsection "Delegations"
For use of \f(CW\*(C`Parser\*(C'\fR, this module also delegates \f(CW\*(C`valid_params\*(C'\fR and
\&\f(CW\*(C`params\*(C'\fR. This is just convenience to save typing the following:
.PP
.Vb 1
\&    DateTime::Format::Builder::Parser\->valid_params( blah )
.Ve
.PP
Instead we get to type:
.PP
.Vb 2
\&    $self\->valid_params( blah );
\&    _\|_PACKAGE_\|_\->valid_params( blah );
.Ve
.SH "WRITING A SUBCLASS"
.IX Header "WRITING A SUBCLASS"
Rather than attempt to explain how it all works, I think it's best if
you take a look at \fIRegex.pm\fR and \fIStrptime.pm\fR as examples and
work from there.
.SH "SUPPORT"
.IX Header "SUPPORT"
See DateTime::Format::Builder for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
http://datetime.perl.org/
.PP
perl, DateTime, DateTime::Format::Builder,
DateTime::Format::Builder::Parser.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Iain Truskett
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
