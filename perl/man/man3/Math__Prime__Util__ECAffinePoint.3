.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Prime::Util::ECAffinePoint 3"
.TH Math::Prime::Util::ECAffinePoint 3 "2017-12-02" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Prime::Util::ECAffinePoint \- Elliptic curve operations for affine points
.SH "VERSION"
.IX Header "VERSION"
Version 0.70
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Create a point on a curve (a,b,n) with coordinates 0,1
\&  my $ECP = Math::Prime::Util::ECAffinePoint\->new($a, $b, $n, 0, 1);
\&
\&  # scalar multiplication by k.
\&  $ECP\->mul($k);
\&
\&  # add two points on the same curve
\&  $ECP\->add($ECP2);
\&
\&  say "P = O" if $ECP\->is_infinity();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This really should just be in Math::EllipticCurve.
.PP
To write.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $point = Math::Prime::Util::ECAffinePoint\->new(a, b, n, x, y);
.Ve
.PP
Returns a new point at \f(CW\*(C`(x,y,1)\*(C'\fR on the curve \f(CW\*(C`(a,b,n)\*(C'\fR.
.SS "a"
.IX Subsection "a"
.SS "b"
.IX Subsection "b"
.SS "n"
.IX Subsection "n"
Returns the \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`b\*(C'\fR, or \f(CW\*(C`n\*(C'\fR values that describe the curve.
.SS "x"
.IX Subsection "x"
.SS "y"
.IX Subsection "y"
Returns the \f(CW\*(C`x\*(C'\fR or \f(CW\*(C`y\*(C'\fR values that define the point on the curve.
.SS "f"
.IX Subsection "f"
Returns a possible factor found during \s-1EC\s0 multiplication.
.SS "add"
.IX Subsection "add"
Takes another point on the same curve as an argument and adds it this point.
.SS "mul"
.IX Subsection "mul"
Takes an integer and performs scalar multiplication of the point.
.SS "is_infinity"
.IX Subsection "is_infinity"
Returns true if the point is (0,1), which is the point at infinity for
the affine coordinates.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::EllipticCurve::Prime
.PP
This really should just be in a Math::EllipticCurve module.
.SH "AUTHORS"
.IX Header "AUTHORS"
Dana Jacobsen <dana@acm.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012\-2013 by Dana Jacobsen <dana@acm.org>
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
