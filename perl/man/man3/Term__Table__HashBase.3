.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::Table::HashBase 3"
.TH Term::Table::HashBase 3 "2017-10-11" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::Table::HashBase \- Build hash based classes.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A class:
.PP
.Vb 3
\&    package My::Class;
\&    use strict;
\&    use warnings;
\&
\&    # Generate 3 accessors
\&    use Term::Table::HashBase qw/foo \-bar ^baz/;
\&
\&    # Chance to initialize defaults
\&    sub init {
\&        my $self = shift;    # No other args
\&        $self\->{+FOO} ||= "foo";
\&        $self\->{+BAR} ||= "bar";
\&        $self\->{+BAZ} ||= "baz";
\&    }
\&
\&    sub print {
\&        print join ", " => map { $self\->{$_} } FOO, BAR, BAZ;
\&    }
.Ve
.PP
Subclass it
.PP
.Vb 3
\&    package My::Subclass;
\&    use strict;
\&    use warnings;
\&
\&    # Note, you should subclass before loading HashBase.
\&    use base \*(AqMy::Class\*(Aq;
\&    use Term::Table::HashBase qw/bat/;
\&
\&    sub init {
\&        my $self = shift;
\&
\&        # We get the constants from the base class for free.
\&        $self\->{+FOO} ||= \*(AqSubFoo\*(Aq;
\&        $self\->{+BAT} ||= \*(Aqbat\*(Aq;
\&
\&        $self\->SUPER::init();
\&    }
.Ve
.PP
use it:
.PP
.Vb 4
\&    package main;
\&    use strict;
\&    use warnings;
\&    use My::Class;
\&
\&    my $one = My::Class\->new(foo => \*(AqMyFoo\*(Aq, bar => \*(AqMyBar\*(Aq);
\&
\&    # Accessors!
\&    my $foo = $one\->foo;    # \*(AqMyFoo\*(Aq
\&    my $bar = $one\->bar;    # \*(AqMyBar\*(Aq
\&    my $baz = $one\->baz;    # Defaulted to: \*(Aqbaz\*(Aq
\&
\&    # Setters!
\&    $one\->set_foo(\*(AqA Foo\*(Aq);
\&
\&    #\*(Aq\-bar\*(Aq means read\-only, so the setter will throw an exception (but is defined).
\&    $one\->set_bar(\*(AqA bar\*(Aq);
\&
\&    # \*(Aq^baz\*(Aq means deprecated setter, this will warn about the setter being
\&    # deprecated.
\&    $one\->set_baz(\*(AqA Baz\*(Aq);
\&
\&    $one\->{+FOO} = \*(Aqxxx\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is used to generate classes based on hashrefs. Using this class
will give you a \f(CW\*(C`new()\*(C'\fR method, as well as generating accessors you request.
Generated accessors will be getters, \f(CW\*(C`set_ACCESSOR\*(C'\fR setters will also be
generated for you. You also get constants for each accessor (all caps) which
return the key into the hash for that accessor. Single inheritance is also
supported.
.SH "THIS IS A BUNDLED COPY OF HASHBASE"
.IX Header "THIS IS A BUNDLED COPY OF HASHBASE"
This is a bundled copy of Object::HashBase. This file was generated using
the
\&\f(CW\*(C`/home/exodist/perl5/perlbrew/perls/main/bin/hashbase_inc.pl\*(C'\fR
script.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1PROVIDED BY HASH BASE\s0"
.IX Subsection "PROVIDED BY HASH BASE"
.ie n .IP "$it = $class\->new(@VALUES)" 4
.el .IP "\f(CW$it\fR = \f(CW$class\fR\->new(@VALUES)" 4
.IX Item "$it = $class->new(@VALUES)"
Create a new instance using key/value pairs.
.Sp
HashBase will not export \f(CW\*(C`new()\*(C'\fR if there is already a \f(CW\*(C`new()\*(C'\fR method in your
packages inheritance chain.
.Sp
\&\fBIf you do not want this method you can define your own\fR you just have to
declare it before loading Term::Table::HashBase.
.Sp
.Vb 1
\&    package My::Package;
\&
\&    # predeclare new() so that HashBase does not give us one.
\&    sub new;
\&
\&    use Term::Table::HashBase qw/foo bar baz/;
\&
\&    # Now we define our own new method.
\&    sub new { ... }
.Ve
.Sp
This makes it so that HashBase sees that you have your own \f(CW\*(C`new()\*(C'\fR method.
Alternatively you can define the method before loading HashBase instead of just
declaring it, but that scatters your use statements.
.SS "\s-1HOOKS\s0"
.IX Subsection "HOOKS"
.ie n .IP "$self\->\fBinit()\fR" 4
.el .IP "\f(CW$self\fR\->\fBinit()\fR" 4
.IX Item "$self->init()"
This gives you the chance to set some default values to your fields. The only
argument is \f(CW$self\fR with its indexes already set from the constructor.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
To generate accessors you list them when using the module:
.PP
.Vb 1
\&    use Term::Table::HashBase qw/foo/;
.Ve
.PP
This will generate the following subs in your namespace:
.IP "\fBfoo()\fR" 4
.IX Item "foo()"
Getter, used to get the value of the \f(CW\*(C`foo\*(C'\fR field.
.IP "\fBset_foo()\fR" 4
.IX Item "set_foo()"
Setter, used to set the value of the \f(CW\*(C`foo\*(C'\fR field.
.IP "\s-1\fBFOO\s0()\fR" 4
.IX Item "FOO()"
Constant, returns the field \f(CW\*(C`foo\*(C'\fR's key into the class hashref. Subclasses will
also get this function as a constant, not simply a method, that means it is
copied into the subclass namespace.
.Sp
The main reason for using these constants is to help avoid spelling mistakes
and similar typos. It will not help you if you forget to prefix the '+' though.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
You can subclass an existing HashBase class.
.PP
.Vb 2
\&    use base \*(AqAnother::HashBase::Class\*(Aq;
\&    use Term::Table::HashBase qw/foo bar baz/;
.Ve
.PP
The base class is added to \f(CW@ISA\fR for you, and all constants from base classes
are added to subclasses automatically.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for HashBase can be found at
\&\fIhttp://github.com/exodist/HashBase/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
