.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::DateTime 3"
.TH ActiveState::DateTime 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::DateTime \- Date and Time utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::DateTime qw(is_leap_year days_in_month check_date month_name_short month_name_long gmt_offset);
\&
\& if (is_leap_year($year)) {
\&    ... do stuff ...
\& }
\&
\& my $max_days = days_in_month($year, $month);
\&
\& if (check_date($year, $month, $day)) {
\&    ... do stuff ...
\& }
\&
\& my $short_month_name = month_name_short($month);
\&
\& my $long_month_name = month_name_long($month);
\&
\& my $offset = gmt_offset();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The ActiveState::DateTime module provide functions that can be used
for convenient data and time checks.
.IP "is_leap_year($year)" 4
.IX Item "is_leap_year($year)"
This function takes a numerical argument of a year.  It returns true if
the year is a leap year, otherwise it returns false.
.ie n .IP "$days = days_in_month($year, $month)" 4
.el .IP "\f(CW$days\fR = days_in_month($year, \f(CW$month\fR)" 4
.IX Item "$days = days_in_month($year, $month)"
This function returns the number of days in a month and takes into
account leap years.  The year is a numerical argument.  The month is
a numerical argument from 1 to 12.
.ie n .IP "check_date($year, $month, $day)" 4
.el .IP "check_date($year, \f(CW$month\fR, \f(CW$day\fR)" 4
.IX Item "check_date($year, $month, $day)"
This function takes numerical arguments for year, month and day and
checks to make sure the date is valid.  For example:
.Sp
Is February 29, 2005 a valid date?
.Sp
Is February 29, 2008 a valid date?
.Sp
The month is a numerical argument that ranges from 1 to 12.
.ie n .IP "$month_name = month_name_short($month);" 4
.el .IP "\f(CW$month_name\fR = month_name_short($month);" 4
.IX Item "$month_name = month_name_short($month);"
This function returns the English three letter abbreviation of the month
name.
.ie n .IP "$month_name = month_name_long($month);" 4
.el .IP "\f(CW$month_name\fR = month_name_long($month);" 4
.IX Item "$month_name = month_name_long($month);"
This function returns the full English month name.
.ie n .IP "$gmt_offset = \fBgmt_offset()\fR;" 4
.el .IP "\f(CW$gmt_offset\fR = \fBgmt_offset()\fR;" 4
.IX Item "$gmt_offset = gmt_offset();"
This function returns the \s-1GMT\s0 offset.
.PP
No functions are exported by default.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003 ActiveState Corp.  All rights reserved.
