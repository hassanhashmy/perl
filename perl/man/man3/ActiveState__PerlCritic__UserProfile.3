.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::PerlCritic::UserProfile 3"
.TH ActiveState::PerlCritic::UserProfile 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::PerlCritic::UserProfile \- Edit a perlcriticrc file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $profile = ActiveState::PerlCritic::UserProfile\->new( $filename );
\&
\&  my $policy = $profile\->policy("RegularExpressions::RequireExtendedFormatting");
\&  $policy\->state("enabled");
\&  $policy\->severity(2);
\&  $policy\->param("foo" => 42);
\&
\&  $profile\->save( $filename );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ActiveState::PerlCritic::UserProfile\*(C'\fR objects holds a \fIperlcriticrc\fR file where policy state
and parameters can be queried/modified and the whole configuration
file written back to disk.
.PP
The following methods are provided:
.ie n .IP "$profile = ActiveState::PerlCritic::UserProfile\->new" 4
.el .IP "\f(CW$profile\fR = ActiveState::PerlCritic::UserProfile\->new" 4
.IX Item "$profile = ActiveState::PerlCritic::UserProfile->new"
.PD 0
.ie n .IP "$profile = ActiveState::PerlCritic::UserProfile\->new( $filename )" 4
.el .IP "\f(CW$profile\fR = ActiveState::PerlCritic::UserProfile\->new( \f(CW$filename\fR )" 4
.IX Item "$profile = ActiveState::PerlCritic::UserProfile->new( $filename )"
.PD
Creates a new profile object and optinally initialize its state from
the given filename.  If a filename is passed it's also saved so that
the calling the save method without a filename saves back to the same
file.
.ie n .IP "$profile = ActiveState::PerlCritic::UserProfile\->new_default" 4
.el .IP "\f(CW$profile\fR = ActiveState::PerlCritic::UserProfile\->new_default" 4
.IX Item "$profile = ActiveState::PerlCritic::UserProfile->new_default"
Open up the user default perlcriticrc file; usually found at
\&\fI~/.perlcriticrc\fR.  The file name is saved so that invoking the save
method without a filename saves the state back to the file.
.ie n .IP "$profile\->save" 4
.el .IP "\f(CW$profile\fR\->save" 4
.IX Item "$profile->save"
.PD 0
.ie n .IP "$profile\->save( $filename )" 4
.el .IP "\f(CW$profile\fR\->save( \f(CW$filename\fR )" 4
.IX Item "$profile->save( $filename )"
.PD
Write the current state of the userprofile object back to the given
file.  If no filename is given try to save back to the filename that
the profile object was initialized from.
.ie n .IP "$profile\->filename" 4
.el .IP "\f(CW$profile\fR\->filename" 4
.IX Item "$profile->filename"
Returns the filename that the state was initialized from or last saved
to.
.ie n .IP "$profile\->dirname" 4
.el .IP "\f(CW$profile\fR\->dirname" 4
.IX Item "$profile->dirname"
Returns the name of the directory where the profile file resides.
.ie n .IP "$profile\->content" 4
.el .IP "\f(CW$profile\fR\->content" 4
.IX Item "$profile->content"
Returns the content that would be written if the profile had been saved now.
.ie n .IP "$profile\->revert" 4
.el .IP "\f(CW$profile\fR\->revert" 4
.IX Item "$profile->revert"
Revert to the stored version of the configuration file.
.ie n .IP "$profile\->clear" 4
.el .IP "\f(CW$profile\fR\->clear" 4
.IX Item "$profile->clear"
Empty the configuration file.
.ie n .IP "$profile\->param( $name )" 4
.el .IP "\f(CW$profile\fR\->param( \f(CW$name\fR )" 4
.IX Item "$profile->param( $name )"
.PD 0
.ie n .IP "$profile\->param( $name => $new_svalue )" 4
.el .IP "\f(CW$profile\fR\->param( \f(CW$name\fR => \f(CW$new_svalue\fR )" 4
.IX Item "$profile->param( $name => $new_svalue )"
.PD
Gets or sets the specified global parameter value
.ie n .IP "$profile\->policies" 4
.el .IP "\f(CW$profile\fR\->policies" 4
.IX Item "$profile->policies"
Lists all the policies (both configured or unconfigured).
.ie n .IP "$profile\->policy( $name )" 4
.el .IP "\f(CW$profile\fR\->policy( \f(CW$name\fR )" 4
.IX Item "$profile->policy( $name )"
Look up the given policy object.  The returned object provide the following methods:
.RS 4
.ie n .IP "$policy\->name" 4
.el .IP "\f(CW$policy\fR\->name" 4
.IX Item "$policy->name"
Returns the name of the policy; it's a string like \*(L"RegularExpressions::RequireExtendedFormatting\*(R".
.ie n .IP "$policy\->config_name" 4
.el .IP "\f(CW$policy\fR\->config_name" 4
.IX Item "$policy->config_name"
Returns the name used in the configuration file.  This will often be
the same as \f(CW\*(C`$policy\->name\*(C'\fR, but not always.  There should not
really be a reason to expose this name to users.
.ie n .IP "$policy\->state" 4
.el .IP "\f(CW$policy\fR\->state" 4
.IX Item "$policy->state"
.PD 0
.ie n .IP "$policy\->state( $new_state )" 4
.el .IP "\f(CW$policy\fR\->state( \f(CW$new_state\fR )" 4
.IX Item "$policy->state( $new_state )"
.PD
Gets or sets the state of the policy.  The state is one of the following values:
.Sp
.Vb 3
\&  unconfigured
\&  enabled
\&  disabled
.Ve
.ie n .IP "$policy\->severity" 4
.el .IP "\f(CW$policy\fR\->severity" 4
.IX Item "$policy->severity"
.PD 0
.ie n .IP "$policy\->severity( $int )" 4
.el .IP "\f(CW$policy\fR\->severity( \f(CW$int\fR )" 4
.IX Item "$policy->severity( $int )"
.PD
Gets or sets the severity for the policy.  It's a number in the range 1 to 5.
.ie n .IP "$policy\->param( $name )" 4
.el .IP "\f(CW$policy\fR\->param( \f(CW$name\fR )" 4
.IX Item "$policy->param( $name )"
.PD 0
.ie n .IP "$policy\->param( $name => $new_value )" 4
.el .IP "\f(CW$policy\fR\->param( \f(CW$name\fR => \f(CW$new_value\fR )" 4
.IX Item "$policy->param( $name => $new_value )"
.PD
Gets or sets policy specific parameter values
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Perl::Critic, ActiveState::Config::INI
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010 ActiveState Software Inc.  All rights reserved.
