.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::StopWatch 3"
.TH ActiveState::StopWatch 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::StopWatch \- Time code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::StopWatch qw(start_watch stop_watch read_watch real_time);
\&
\& my $w = start_watch();
\& # ... do stuff ...
\& print read_watch($w);
\& # ... do stuff ...
\& print stop_watch($w);
\&
\& # restart it
\& start_watch($w);
\& print stop_watch($w);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The ActiveState::StopWatch module provide functions that can be used
to measure the time spent by sections of code.  The following
functions are provided:
.ie n .IP "$w = \fBstart_watch()\fR" 4
.el .IP "\f(CW$w\fR = \fBstart_watch()\fR" 4
.IX Item "$w = start_watch()"
.PD 0
.ie n .IP "start_watch( $w )" 4
.el .IP "start_watch( \f(CW$w\fR )" 4
.IX Item "start_watch( $w )"
.PD
Without argument this function creates a new watch object.  With
argument it can restart a watch that has been stopped after invoking
the \fBstop_watch()\fR function on it.  If the watch provided is not stopped
then its state is not affected.
.ie n .IP "$str = read_watch( $w )" 4
.el .IP "\f(CW$str\fR = read_watch( \f(CW$w\fR )" 4
.IX Item "$str = read_watch( $w )"
This function returns a string that tells how much real, user and
system time has ticked during the time the watch has been running.
The string will look like this:
.Sp
.Vb 1
\&  r=12.5s u=4.90s s=0.55s cu=1.22s cs=0.22s
.Ve
.Sp
The 'cu' and 'cs' field gives time spent in children of the current
process during the time the watch has been running.  The child fields
are not shown if they are 0.
.ie n .IP "$str = stop_watch( $w )" 4
.el .IP "\f(CW$str\fR = stop_watch( \f(CW$w\fR )" 4
.IX Item "$str = stop_watch( $w )"
This function return a string of the same format as for \fBread_watch()\fR,
but it will also stop the clock from running.  This means that
\&\fBread_watch()\fR will continue to return the same result.  The watch can
be restarted by calling \fBstart_watch()\fR with the watch object as
argument.
.ie n .IP "$r = real_time( $w )" 4
.el .IP "\f(CW$r\fR = real_time( \f(CW$w\fR )" 4
.IX Item "$r = real_time( $w )"
This function returns the number of seconds of real time passed during
the time the watch has been running.
.PP
Only the \fBstart_watch()\fR and \fBstop_watch()\fR functions are exported by default.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003 ActiveState Corp.  All rights reserved.
