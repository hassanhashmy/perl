.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Prompt 3"
.TH ActiveState::Prompt 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Prompt \- Interactive questions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::prompt qw(prompt yes enter);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "prompt( $question )" 4
.el .IP "prompt( \f(CW$question\fR )" 4
.IX Item "prompt( $question )"
.PD 0
.ie n .IP "prompt( $question, $default )" 4
.el .IP "prompt( \f(CW$question\fR, \f(CW$default\fR )" 4
.IX Item "prompt( $question, $default )"
.ie n .IP "prompt( $question, %opts )" 4
.el .IP "prompt( \f(CW$question\fR, \f(CW%opts\fR )" 4
.IX Item "prompt( $question, %opts )"
.PD
This function will ask a question on the terminal and return the
answer given.  The return value will always be defined.
.Sp
Options can be passed in as key/value pairs.  The following options
are recognized:
.Sp
.Vb 6
\&  default
\&  trim_space
\&  must_match
\&  no_match_msg
\&  use_default
\&  silent
.Ve
.Sp
The \f(CW\*(C`default\*(C'\fR is returned if the user simply press return.  The
default value is shown in brackets.  If no default is provided then no
brackets are added to the question.
.Sp
If \f(CW\*(C`trim_space\*(C'\fR is \s-1TRUE,\s0 then any leading and trailing space in the
anwer is trimmed off and any internal space is collapsed to a single
space.
.Sp
The \f(CW\*(C`must_match\*(C'\fR value is used to validate answers.  It can be either
a function, array or regular expression.  If it is a function, then
the function is called with the answer given and should return \s-1TRUE\s0 if
it is to be accepted.  If it is an array, then the answer must be one
of the values in the array.  If it is an regular expression then it
must match it.
.Sp
The \f(CW\*(C`no_match_msg\*(C'\fR is printed if the given answer does not validate
as specified in \f(CW\*(C`must_match\*(C'\fR.
.Sp
If \f(CW\*(C`use_default\*(C'\fR is \s-1TRUE,\s0 then no answer is read from the terminal
and the default is returned (or "" if there is no default).  The
\&\f(CW\*(C`use_default\*(C'\fR is by default \s-1TRUE\s0 if the program is not running on a
terminal or if the \s-1PERL_MM_USE_DEFAULT\s0 environment variable is \s-1TRUE.\s0
.Sp
The \f(CW\*(C`silent\*(C'\fR option works like \f(CW\*(C`use_default\*(C'\fR but it also prevent the
prompt text from being printed.  This forces \fBprompt()\fR to return the default
without actually prompting.
.ie n .IP "yes( $question )" 4
.el .IP "yes( \f(CW$question\fR )" 4
.IX Item "yes( $question )"
.PD 0
.ie n .IP "yes( $question, $default )" 4
.el .IP "yes( \f(CW$question\fR, \f(CW$default\fR )" 4
.IX Item "yes( $question, $default )"
.PD
Will use the prompt function to ask a question and then return a \s-1TRUE\s0
value if the answer was \*(L"yes\*(R" or \*(L"y\*(R".
.Sp
The \f(CW$default\fR can either be a string like \*(L"yes\*(R", \*(L"y\*(R", \*(L"no\*(R" or \*(L"n\*(R", or a
boolean value in which case \*(L"yes\*(R" will be the default if \s-1TRUE\s0 and \*(L"no\*(R"
otherwise.  If no \f(CW$default\fR is given it defaults to \*(L"no\*(R".
.IP "\fBenter()\fR" 4
.IX Item "enter()"
Ask the use to press some key before the function returns.
.SH "BUGS"
.IX Header "BUGS"
None.
