.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Bytes 3"
.TH ActiveState::Bytes 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Bytes \- Format byte quantities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use ActiveState::Bytes qw(bytes_format bytes_parse);
\& print "The file is ", bytes_format(\-s $file), " long.\en";
\&
\& print "1 megabyte is ", bytes_parse(\*(Aq1m\*(Aq), " bytes.\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`ActiveState::Bytes\*(C'\fR module provides functions for dealing with human
readable byte strings.
.ie n .IP "$str = bytes_format( $n )" 4
.el .IP "\f(CW$str\fR = bytes_format( \f(CW$n\fR )" 4
.IX Item "$str = bytes_format( $n )"
This formats the number of bytes given as argument as a string using
suffixes like \*(L"\s-1KB\*(R", \*(L"GB\*(R", \*(L"TB\*(R"\s0 to make it concise.  The return value
is a string like one of these:
.Sp
.Vb 3
\&   128 bytes
\&   1.5 KB
\&   130 MB
.Ve
.Sp
Precision might be lost and there is currently no way to influence how
precise the result should be.  The current implementation gives no
more than 3 digits of precision.
.ie n .IP "$bytes = bytes_parse( $str )" 4
.el .IP "\f(CW$bytes\fR = bytes_parse( \f(CW$str\fR )" 4
.IX Item "$bytes = bytes_parse( $str )"
Converts a bytes string ( \*(L"1m\*(R" ) into actually bytes. Lowercase units are in
powers of 10, uppercase are in powers of 2. For example, 1K is 1024 bytes, 1k
is 1000 bytes. Supports units are k, m, g, t, p, e, z, and y in ascending
order.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003 ActiveState Corp.  All rights reserved.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ActiveState::Duration
