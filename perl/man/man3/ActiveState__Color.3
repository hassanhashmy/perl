.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Color 3"
.TH ActiveState::Color 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Color \- Collection of color conversion functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use ActiveState::Color qw(name_from_rgb rgb_from_name
\&                           rgb_from_hsv hsv_from_rgb
\&                          );
\& my($h, $s, $v) = hsv_from_rgb(rgb_from_name(shift));
\& # make the color fully saturated and a bit lighter
\& $s = 1; $v *= 1.2;
\& print name_from_rgb(rgb_from_hsv($h, $s, $v)), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "($r, $g, $b) = rgb_from_name( $name )" 4
.el .IP "($r, \f(CW$g\fR, \f(CW$b\fR) = rgb_from_name( \f(CW$name\fR )" 4
.IX Item "($r, $g, $b) = rgb_from_name( $name )"
This will convert a color name or a hex RGB-tripplet to a decimal \s-1RGB\s0
value with \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR in the range 0.0 to 1.0.  The hex tripplet can
have any precision and can optionally be prefixed with \*(L"#\*(R".  If the
name is not recognized this function will croak.  Examples of valid
names are:
.Sp
.Vb 7
\&    #F0F
\&    #FF00FF
\&    #FFF000FFF
\&    ff00ff
\&    black
\&    BLACK
\&    yellow
.Ve
.ie n .IP "$hexname = hex_from_rgb( $r, $g, $b )" 4
.el .IP "\f(CW$hexname\fR = hex_from_rgb( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "$hexname = hex_from_rgb( $r, $g, $b )"
This converts a decimal \s-1RGB\s0 value with \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR in the range 0.0 to
1.0 to an 8\-bit hex RGB-tripplet.  The output will be on the form:
.Sp
.Vb 1
\&    #ff00ff
.Ve
.ie n .IP "$name = name_from_rgb( $r, $g, $b )" 4
.el .IP "\f(CW$name\fR = name_from_rgb( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "$name = name_from_rgb( $r, $g, $b )"
This will convert a decimal \s-1RGB\s0 value to a color name.  If the color
is one of the 8 primary \s-1RGB\s0 colors then the name will be returned,
otherwise a hex RGB-tripplet is returned.  The 8 primary color names
are:
.Sp
.Vb 8
\&    black
\&    blue
\&    cyan
\&    green
\&    magenta
\&    red
\&    yellow
\&    white
.Ve
.ie n .IP "($r, $g, $b) = rgb_from_hsv( $h, $s, $v )" 4
.el .IP "($r, \f(CW$g\fR, \f(CW$b\fR) = rgb_from_hsv( \f(CW$h\fR, \f(CW$s\fR, \f(CW$v\fR )" 4
.IX Item "($r, $g, $b) = rgb_from_hsv( $h, $s, $v )"
.PD 0
.ie n .IP "($h, $s, $v) = rgb_from_hsv( $r, $g, $b )" 4
.el .IP "($h, \f(CW$s\fR, \f(CW$v\fR) = rgb_from_hsv( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "($h, $s, $v) = rgb_from_hsv( $r, $g, $b )"
.PD
These functions convert between the \s-1RGB\s0 and \s-1HSV\s0 color space.  The
range of \f(CW$s\fR, \f(CW$v\fR, \f(CW$r\fR, \f(CW$g\fR, and \f(CW$b\fR is 0.0 to 1.0.  The range of \f(CW$h\fR is 0.0
to 360.0.
.SH "BUGS"
.IX Header "BUGS"
none.
