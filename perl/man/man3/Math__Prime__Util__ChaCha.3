.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Prime::Util::ChaCha 3"
.TH Math::Prime::Util::ChaCha 3 "2017-12-02" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Prime::Util::ChaCha \- Pure Perl ChaCha20 CSPRNG
.SH "VERSION"
.IX Header "VERSION"
Version 0.70
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A pure Perl implementation of ChaCha20 with a \s-1CSPRNG\s0 interface.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "csrand"
.IX Subsection "csrand"
Takes a binary string as input and seeds the internal \s-1CSPRNG.\s0
.SS "srand"
.IX Subsection "srand"
A method for sieving the \s-1CSPRNG\s0 with a small value.  This will not be secure
but can be useful for simulations and emulating the system \f(CW\*(C`srand\*(C'\fR.
.PP
With no argument, chooses a random number, seeds and returns the number.
With a single integer argument, seeds and returns the number.
.SS "irand"
.IX Subsection "irand"
Returns a random 32\-bit integer.
.SS "irand64"
.IX Subsection "irand64"
Returns a random 64\-bit integer.
.SS "random_bytes"
.IX Subsection "random_bytes"
Takes an unsigned number \f(CW\*(C`n\*(C'\fR as input and returns that many random bytes
as a single binary string.
.SS ""
.IX Subsection ""
.SH "AUTHORS"
.IX Header "AUTHORS"
Dana Jacobsen <dana@acm.org>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Daniel J. Bernstein wrote the ChaCha family of stream ciphers in 2008 as
an update to the popular Salsa20 cipher from 2005.
.PP
\&\s-1RFC7539:\s0 \*(L"ChaCha20 and Poly1305 for \s-1IETF\s0 Protocols\*(R" was used to create both
the C and Perl implementations.  Test vectors from that document are used
here as well.
.PP
For final optimizations I got ideas from Christopher Madsen's
Crypt::Salsa20 for how to best work around some of Perl's aggressive
dynamic typing.
Our core is still about 20% slower than Salsa20.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2017 by Dana Jacobsen <dana@acm.org>
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
