.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Duration 3"
.TH ActiveState::Duration 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Duration \- Format and parse time duration values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use ActiveState::Duration qw(ago_eng);
\& print "It is now ", ago_eng(time), " since time begun.\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`ActiveState::Duration\*(C'\fR module provides functions to format and
parse time duration values.  Time is expressed as a number of weeks,
days, hours, minutes and seconds.
.ie n .IP "$str = dur_format_XXX( $duration )" 4
.el .IP "\f(CW$str\fR = dur_format_XXX( \f(CW$duration\fR )" 4
.IX Item "$str = dur_format_XXX( $duration )"
.PD 0
.ie n .IP "$str = dur_format_XXX( $duration, $precision )" 4
.el .IP "\f(CW$str\fR = dur_format_XXX( \f(CW$duration\fR, \f(CW$precision\fR )" 4
.IX Item "$str = dur_format_XXX( $duration, $precision )"
.ie n .IP "$str = dur_format_XXX( $duration, $precision, $frac_part )" 4
.el .IP "\f(CW$str\fR = dur_format_XXX( \f(CW$duration\fR, \f(CW$precision\fR, \f(CW$frac_part\fR )" 4
.IX Item "$str = dur_format_XXX( $duration, $precision, $frac_part )"
.PD
The \fBdur_format_XXX()\fR functions take a time \f(CW$duration\fR value (in
seconds) and format it as a readable string.  This section describes
the common arguments supported by most of \fBdur_format_XXX()\fR functions.
The \f(CW\*(C`XXX\*(C'\fR in the function name selects which format it returns and is
described below.
.Sp
The \f(CW$precision\fR argument specify how close the string much match the
duration value.  The default is 0.05 which means that up to 5% off is
acceptable.  Pass 0 as the \f(CW$precision\fR to request an exact result.
.Sp
The \f(CW$frac_part\fR specify at which time unit formatting will start using
fractions to achieve the desired precision.  It should be one of
\&\*(L"week\*(R", \*(L"day\*(R", \*(L"hour\*(R", \*(L"minute\*(R", \*(L"second\*(R" or \*(L"first\*(R".  The default is
\&\*(L"second\*(R".
.Sp
A \f(CW$frac_part\fR value of \*(L"first\*(R" is special and needs some more
explanation.  The time units will be considered in order from \*(L"week\*(R"
to \*(L"second\*(R", and the first one longer than the \f(CW$duration\fR is used.
.ie n .IP "$str = dur_format_sm( @ARGS )" 4
.el .IP "\f(CW$str\fR = dur_format_sm( \f(CW@ARGS\fR )" 4
.IX Item "$str = dur_format_sm( @ARGS )"
Use the Sendmail format which looks like \*(L"1h30m\*(R".  If the \f(CW$duration\fR
value is negative it is formatted like \*(L"\-1h30m\*(R".
.ie n .IP "$str = dur_format_iso( @ARGS )" 4
.el .IP "\f(CW$str\fR = dur_format_iso( \f(CW@ARGS\fR )" 4
.IX Item "$str = dur_format_iso( @ARGS )"
Use the \s-1ISO 8601\s0 format which looks like \*(L"\s-1PT1H30M\*(R".\s0  If the \f(CW$duration\fR
value is negative it is formatter with a leading \*(L"\-\*(R", even though that
is not standards conforming.
.ie n .IP "$str = dur_format_eng( @ARGS )" 4
.el .IP "\f(CW$str\fR = dur_format_eng( \f(CW@ARGS\fR )" 4
.IX Item "$str = dur_format_eng( @ARGS )"
Use plain English; \*(L"1 hour and 30 minutes\*(R".  If the \f(CW$duration\fR value is
negative then the word \*(L"negative\*(R" is prepended to the string.
.ie n .IP "$str = ago_eng( @ARGS )" 4
.el .IP "\f(CW$str\fR = ago_eng( \f(CW@ARGS\fR )" 4
.IX Item "$str = ago_eng( @ARGS )"
Same as \fBdur_format_eng()\fR but adds the word \*(L"ago\*(R" as long as \f(CW$duration\fR
is positive and the words \*(L"from now\*(R" if \f(CW$duration\fR is negative. A
\&\f(CW$duration\fR of 0 is special cased as \*(L"just now\*(R".
.ie n .IP "$str = dur_format_clock( $duration )" 4
.el .IP "\f(CW$str\fR = dur_format_clock( \f(CW$duration\fR )" 4
.IX Item "$str = dur_format_clock( $duration )"
Use stopwatch format; \*(L"1:30:00\*(R", i.e. \*(L"hhh:mm:ss\*(R".  This function does
not take the \f(CW$precision\fR or \f(CW$frac_part\fR arguments yet and the \f(CW$duration\fR
is truncated to whole seconds.  A negative \f(CW$duration\fR value will be
formated with a leading \*(L"\-\*(R".  A value of \f(CW0\fR is formatted as \*(L"0:00:00\*(R".
.ie n .IP "$duration = dur_parse( $str )" 4
.el .IP "\f(CW$duration\fR = dur_parse( \f(CW$str\fR )" 4
.IX Item "$duration = dur_parse( $str )"
This function takes a string representing a duration value and return
it as number of seconds.  All strings produced by any of the
\&\fBdur_format_XXX()\fR or the \fBago_eng()\fR functions can be parsed back to an
\&\f(CW$duration\fR value by \fBdur_parse()\fR.  It returns \f(CW\*(C`undef\*(C'\fR if it cannot
parse the \f(CW$str\fR for some reason.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003 ActiveState Corp.  All rights reserved.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Time::Duration, ActiveState::StopWatch, ActiveState::Bytes
