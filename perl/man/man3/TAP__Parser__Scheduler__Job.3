.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Scheduler::Job 3"
.TH TAP::Parser::Scheduler::Job 3 "2017-04-06" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Scheduler::Job \- A single testing job.
.SH "VERSION"
.IX Header "VERSION"
Version 3.39
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use TAP::Parser::Scheduler::Job;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents a single test 'job'.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 3
\&    my $job = TAP::Parser::Scheduler::Job\->new(
\&        $filename, $description
\&    );
.Ve
.PP
Given the filename and description of a test as scalars, returns a new
TAP::Parser::Scheduler::Job object.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`on_finish\*(C'\fI\fR
.IX Subsection "on_finish"
.PP
.Vb 1
\&    $self\->on_finish(\e&method).
.Ve
.PP
Register a closure to be called when this job is destroyed. The callback
will be passed the \f(CW\*(C`TAP::Parser::Scheduler::Job\*(C'\fR object as it's only argument.
.PP
\fI\f(CI\*(C`finish\*(C'\fI\fR
.IX Subsection "finish"
.PP
.Vb 1
\&   $self\->finish;
.Ve
.PP
Called when a job is complete to unlock it. If a callback has been registered
with \f(CW\*(C`on_finish\*(C'\fR, it calls it. Otherwise, it does nothing.
.SS "Attributes"
.IX Subsection "Attributes"
.Vb 3
\&  $self\->filename;
\&  $self\->description;
\&  $self\->context;
.Ve
.PP
These are all \*(L"getters\*(R" which return the data set for these attributes during object construction.
.PP
\fI\f(CI\*(C`filename\*(C'\fI\fR
.IX Subsection "filename"
.PP
\fI\f(CI\*(C`description\*(C'\fI\fR
.IX Subsection "description"
.PP
\fI\f(CI\*(C`context\*(C'\fI\fR
.IX Subsection "context"
.PP
\fI\f(CI\*(C`as_array_ref\*(C'\fI\fR
.IX Subsection "as_array_ref"
.PP
For backwards compatibility in callbacks.
.PP
\fI\f(CI\*(C`is_spinner\*(C'\fI\fR
.IX Subsection "is_spinner"
.PP
.Vb 1
\&  $self\->is_spinner;
.Ve
.PP
Returns false indicating that this is a real job rather than a
\&'spinner'. Spinners are returned when the scheduler still has pending
jobs but can't (because of locking) return one right now.
