.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActivePerl::Config 3"
.TH ActivePerl::Config 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActivePerl::Config \- Override the ActivePerl configuration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Config qw(%Config);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The standard \f(CW\*(C`Config\*(C'\fR module provides the \f(CW%Config\fR hash containing
information about how this perl was built.  These configuration values
are used by modules and programs with the assumption that they still
apply for the system where perl is deployed.  This assumption does not
always hold.  The \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR module will for instance
assume that it can use the compiler \f(CW$Config\fR{cc} for building new
extensions, but another compiler might be the only one available.
.PP
The \f(CW\*(C`ActivePerl::Config\*(C'\fR module provides a solution for this.  It
overrides the values of \f(CW%Config\fR to better match the system where perl
currently runs.  For example, on Windows allows you to build extensions
with the free compiler gcc (see <http://www.mingw.org/>) even
though ActivePerl for Windows itself is built with the commercial
Microsoft Visual Studio 6 compiler.
.PP
The \f(CW\*(C`ActivePerl::Config\*(C'\fR module is not used directly.  It is
automatically loaded by \f(CW\*(C`Config\*(C'\fR if available and works behind the
scenes, overriding the values that are found in the \f(CW%Config\fR hash.  The
overriden values from \f(CW\*(C`ActivePerl::Config\*(C'\fR will also show when \f(CW\*(C`perl
\&\-V:foo\*(C'\fR is invoked from the command line.
.SS "Windows overrides"
.IX Subsection "Windows overrides"
For ActivePerl on Windows the following \f(CW%Config\fR overrides are provided:
.ie n .IP "$Config{make}" 4
.el .IP "\f(CW$Config\fR{make}" 4
.IX Item "$Config{make}"
This will be \f(CW\*(C`nmake\*(C'\fR by default, but if no \fInmake\fR program can be
found and other compatible make programs are found, then this value
will reflect that.  Currently \fIdmake\fR is the only other make
implementation that is compatible enough to build perl extensions.
.ie n .IP "$Config{cc}, $Config{ccflags},..." 4
.el .IP "\f(CW$Config\fR{cc}, \f(CW$Config\fR{ccflags},..." 4
.IX Item "$Config{cc}, $Config{ccflags},..."
The value of \f(CW$Config\fR{cc} will be \f(CW\*(C`cl\*(C'\fR by default, but if no \f(CW\*(C`cl\*(C'\fR
program can be found and \fIgcc\fR is found, then this value is \f(CW\*(C`gcc\*(C'\fR
and other values related to the compiler environment is adjusted
accordingly.
.Sp
The \s-1ACTIVEPERL_CONFIG_CC\s0 environment variable can be set to \f(CW\*(C`gcc\*(C'\fR
to use \f(CW\*(C`gcc\*(C'\fR even when \f(CW\*(C`cl\*(C'\fR is found.
.SS "Mac \s-1OS X\s0 overrides"
.IX Subsection "Mac OS X overrides"
For ActivePerl on Mac \s-1OS X\s0 the compilation flags (like
\&\f(CW$Config{ccflags}\fR) are adjusted to make it possible to compile
extentions on systems that don't have the \s-1SDK\s0
for generating Universal binaries installed.
.SS "HP-UX and Solaris overrides"
.IX Subsection "HP-UX and Solaris overrides"
For ActivePerl on HP-UX and Solaris the following \f(CW%Config\fR overrides
are provided:
.ie n .IP "$Config{make}" 4
.el .IP "\f(CW$Config\fR{make}" 4
.IX Item "$Config{make}"
This will be \f(CW\*(C`make\*(C'\fR by default, but if \fImake\fR can't be found via the
\&\s-1PATH,\s0 then it's set to \fI/usr/ccs/bin/make\fR if that one is available.
.ie n .IP "$Config{cc}, $Config{ccflags},..." 4
.el .IP "\f(CW$Config\fR{cc}, \f(CW$Config\fR{ccflags},..." 4
.IX Item "$Config{cc}, $Config{ccflags},..."
The value of \f(CW$Config\fR{cc} will be \f(CW\*(C`cc\*(C'\fR by default and the other
compiler environment values are set up for compilation with the HP-UX
\&\s-1ANSI C\s0 compiler or the Sun Forte/WorkShop compiler respectively.  If
\&\fIcc\fR can't be found via the \s-1PATH\s0 and \fIgcc\fR is found, then
\&\f(CW$Config\fR{cc} is set to \f(CW\*(C`gcc\*(C'\fR and other values related to the compiler
environment is adjusted accordingly.
.Sp
The \s-1ACTIVEPERL_CONFIG_CC\s0 environment variable can be set to \f(CW\*(C`gcc\*(C'\fR
to use \f(CW\*(C`gcc\*(C'\fR even when \f(CW\*(C`cc\*(C'\fR is found.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The following environment variables can influence the operation of the
\&\f(CW\*(C`ActivePerl::Config\*(C'\fR module:
.IP "\s-1ACTIVEPERL_CONFIG_DISABLE\s0" 4
.IX Item "ACTIVEPERL_CONFIG_DISABLE"
If set to a \s-1TRUE\s0 value (e.g. \*(L"1\*(R"), prevent \f(CW\*(C`ActivePerl::Config\*(C'\fR from
overriding any \f(CW%Config\fR value; the only values seen in \f(CW%Config\fR would be
those determined at perl build time.  Another way to disable
\&\f(CW\*(C`ActivePerl::Config\*(C'\fR permanently is to remove it using ppm
(\f(CW\*(C`ppm remove ActivePerl\-Config\*(C'\fR)
.IP "\s-1ACTIVEPERL_CONFIG_SILENT\s0" 4
.IX Item "ACTIVEPERL_CONFIG_SILENT"
If set to a \s-1TRUE\s0 value (e.g. \*(L"1\*(R"), suppress warnings on \s-1STDERR\s0 when
new compilation environments are set up.  This happens when a
supported compiler is detected that is different from the one that
perl was originally built with.
.IP "\s-1ACTIVEPERL_CONFIG_\s0\fI\s-1FOO\s0\fR" 4
.IX Item "ACTIVEPERL_CONFIG_FOO"
Override the \f(CW$Config\fR{\fIfoo\fR} value.  For example if the
\&\s-1ACTIVEPERL_CONFIG_MAKE\s0 environment variable has the value \f(CW\*(C`dmake\*(C'\fR,
then so would \f(CW$Config\fR{make}.
.Sp
If the \s-1ACTIVEPERL_CONFIG_DISABLE\s0 variable is set, all other
\&\s-1ACTIVEPERL_CONFIG_\s0\fI\s-1FOO\s0\fR variables are ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config
