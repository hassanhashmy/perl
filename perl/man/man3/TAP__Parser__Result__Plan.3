.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Result::Plan 3"
.TH TAP::Parser::Result::Plan 3 "2017-04-06" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Result::Plan \- Plan result token.
.SH "VERSION"
.IX Header "VERSION"
Version 3.39
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of TAP::Parser::Result.  A token of this class will be
returned if a plan line is encountered.
.PP
.Vb 2
\& 1..1
\& ok 1 \- woo hooo!
.Ve
.PP
\&\f(CW1..1\fR is the plan.  Gotta have a plan.
.SH "OVERRIDDEN METHODS"
.IX Header "OVERRIDDEN METHODS"
Mainly listed here to shut up the pitiful screams of the pod coverage tests.
They keep me awake at night.
.IP "\(bu" 4
\&\f(CW\*(C`as_string\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`raw\*(C'\fR
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`plan\*(C'\fI\fR
.IX Subsection "plan"
.PP
.Vb 3
\&  if ( $result\->is_plan ) {
\&     print $result\->plan;
\&  }
.Ve
.PP
This is merely a synonym for \f(CW\*(C`as_string\*(C'\fR.
.PP
\fI\f(CI\*(C`tests_planned\*(C'\fI\fR
.IX Subsection "tests_planned"
.PP
.Vb 1
\&  my $planned = $result\->tests_planned;
.Ve
.PP
Returns the number of tests planned.  For example, a plan of \f(CW1..17\fR will
cause this method to return '17'.
.PP
\fI\f(CI\*(C`directive\*(C'\fI\fR
.IX Subsection "directive"
.PP
.Vb 1
\& my $directive = $plan\->directive;
.Ve
.PP
If a \s-1SKIP\s0 directive is included with the plan, this method will return it.
.PP
.Vb 1
\& 1..0 # SKIP: why bother?
.Ve
.PP
\fI\f(CI\*(C`has_skip\*(C'\fI\fR
.IX Subsection "has_skip"
.PP
.Vb 1
\&  if ( $result\->has_skip ) { ... }
.Ve
.PP
Returns a boolean value indicating whether or not this test has a \s-1SKIP\s0
directive.
.PP
\fI\f(CI\*(C`explanation\*(C'\fI\fR
.IX Subsection "explanation"
.PP
.Vb 1
\& my $explanation = $plan\->explanation;
.Ve
.PP
If a \s-1SKIP\s0 directive was included with the plan, this method will return the
explanation, if any.
.PP
\fI\f(CI\*(C`todo_list\*(C'\fI\fR
.IX Subsection "todo_list"
.PP
.Vb 4
\&  my $todo = $result\->todo_list;
\&  for ( @$todo ) {
\&      ...
\&  }
.Ve
