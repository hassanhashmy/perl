.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Prime::Util::RandomPrimes 3"
.TH Math::Prime::Util::RandomPrimes 3 "2017-12-02" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Prime::Util::RandomPrimes \- Generate random primes
.SH "VERSION"
.IX Header "VERSION"
Version 0.70
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Routines to generate random primes, including constructing proven primes.
.SH "RANDOM PRIME FUNCTIONS"
.IX Header "RANDOM PRIME FUNCTIONS"
.SS "random_prime"
.IX Subsection "random_prime"
Generate a random prime between \f(CW\*(C`low\*(C'\fR and \f(CW\*(C`high\*(C'\fR.  If given one argument,
\&\f(CW\*(C`low\*(C'\fR will be 2.
.SS "random_ndigit_prime"
.IX Subsection "random_ndigit_prime"
Generate a random prime with \f(CW\*(C`n\*(C'\fR digits.  \f(CW\*(C`n\*(C'\fR must be at least 1.
.SS "random_nbit_prime"
.IX Subsection "random_nbit_prime"
Generate a random prime with \f(CW\*(C`n\*(C'\fR bits.  \f(CW\*(C`n\*(C'\fR must be at least 2.
.SS "random_maurer_prime"
.IX Subsection "random_maurer_prime"
Construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits using Maurer's FastPrime
algorithm.  \f(CW\*(C`n\*(C'\fR must be at least 2.
.SS "random_maurer_prime_with_cert"
.IX Subsection "random_maurer_prime_with_cert"
Construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits using Maurer's FastPrime
algorithm.  \f(CW\*(C`n\*(C'\fR must be at least 2.  Returns a list of two items: the
prime and the certificate.
.SS "random_shawe_taylor_prime"
.IX Subsection "random_shawe_taylor_prime"
Construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits using Shawe-Taylor's
algorithm.  \f(CW\*(C`n\*(C'\fR must be at least 2.  The implementation is from
\&\s-1FIPS 186\-4\s0 and uses \s-1SHA\-256\s0 with 512 bits of randomness.
.SS "random_shawe_taylor_prime_with_cert"
.IX Subsection "random_shawe_taylor_prime_with_cert"
Construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits using Shawe-Taylor's
algorithm.  \f(CW\*(C`n\*(C'\fR must be at least 2.  Returns a list of two items: the
prime and the certificate.
.SS "random_strong_prime"
.IX Subsection "random_strong_prime"
Construct a random strong prime of \f(CW\*(C`n\*(C'\fR bits.  \f(CW\*(C`n\*(C'\fR must be at least 128.
.SS "random_proven_prime"
.IX Subsection "random_proven_prime"
Generate or construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits.  \f(CW\*(C`n\*(C'\fR must
be at least 2.
.SS "random_proven_prime_with_cert"
.IX Subsection "random_proven_prime_with_cert"
Generate or construct a random provable prime of \f(CW\*(C`n\*(C'\fR bits.  \f(CW\*(C`n\*(C'\fR must
be at least 2.  Returns a list of two items: the prime and the certificate.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::Prime::Util
.SH "AUTHORS"
.IX Header "AUTHORS"
Dana Jacobsen <dana@acm.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012\-2013 by Dana Jacobsen <dana@acm.org>
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
