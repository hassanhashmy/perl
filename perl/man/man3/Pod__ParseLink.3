.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::ParseLink 3"
.TH Pod::ParseLink 3 "2017-12-25" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::ParseLink \- Parse an L<> formatting code in POD text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Pod::ParseLink;
\&    my $link = get_link();
\&    my ($text, $inferred, $name, $section, $type) = parselink($link);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module only provides a single function, \fBparselink()\fR, which takes the
text of an L<> formatting code and parses it.  It returns the
anchor text for the link (if any was given), the anchor text possibly
inferred from the name and section, the name or \s-1URL,\s0 the section if any,
and the type of link.  The type will be one of \f(CW\*(C`url\*(C'\fR, \f(CW\*(C`pod\*(C'\fR, or \f(CW\*(C`man\*(C'\fR,
indicating a \s-1URL,\s0 a link to a \s-1POD\s0 page, or a link to a Unix manual page.
.PP
Parsing is implemented per perlpodspec.  For backward compatibility,
links where there is no section and name contains spaces, or links where the
entirety of the link (except for the anchor text if given) is enclosed in
double-quotes are interpreted as links to a section (L</section>).
.PP
The inferred anchor text is implemented per perlpodspec:
.PP
.Vb 3
\&    L<name>         =>  L<name|name>
\&    L</section>     =>  L<"section"|/section>
\&    L<name/section> =>  L<"section" in name|name/section>
.Ve
.PP
The name may contain embedded E<> and Z<> formatting codes,
and the section, anchor text, and inferred anchor text may contain any
formatting codes.  Any double quotes around the section are removed as part
of the parsing, as is any leading or trailing whitespace.
.PP
If the text of the L<> escape is entirely enclosed in double
quotes, it's interpreted as a link to a section for backward
compatibility.
.PP
No attempt is made to resolve formatting codes.  This must be done after
calling \fBparselink()\fR (since E<> formatting codes can be used to
escape characters that would otherwise be significant to the parser and
resolving them before parsing would result in an incorrect parse of a
formatting code like:
.PP
.Vb 1
\&    L<verticalE<verbar>barE<sol>slash>
.Ve
.PP
which should be interpreted as a link to the \f(CW\*(C`vertical|bar/slash\*(C'\fR \s-1POD\s0 page
and not as a link to the \f(CW\*(C`slash\*(C'\fR section of the \f(CW\*(C`bar\*(C'\fR \s-1POD\s0 page with an
anchor text of \f(CW\*(C`vertical\*(C'\fR.  Note that not only the anchor text will need to
have formatting codes expanded, but so will the target of the link (to deal
with E<> and Z<> formatting codes), and special handling of
the section may be necessary depending on whether the translator wants to
consider markup in sections to be significant when resolving links.  See
perlpodspec for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Parser
.PP
The current version of this module is always available from its web site at
<http://www.eyrie.org/~eagle/software/podlators/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Russ Allbery <rra@cpan.org>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2001, 2008, 2009 Russ Allbery <rra@cpan.org>.
.PP
This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
