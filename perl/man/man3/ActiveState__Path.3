.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ActiveState::Path 3"
.TH ActiveState::Path 3 "2017-06-23" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::Path \- Collection of small utility functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use ActiveState::Path qw(find_prog);
\&  my $ls = find_prog("ls");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a collection of small utility functions dealing
with file paths.
.PP
The following functions are provided:
.ie n .IP "abs_path( $path )" 4
.el .IP "abs_path( \f(CW$path\fR )" 4
.IX Item "abs_path( $path )"
Returns an absolute pathname denoting the same file as \f(CW$path\fR.  If
\&\f(CW$path\fR is already absolute it is returned unchanged.  The \f(CW$path\fR does
not have to reference an existing file or directory.
.Sp
This functions differs from \fBrealpath()\fR by only removing \*(L".\*(R" or \*(L"..\*(R"
segments at the beginning of \f(CW$path\fR and by only resolving the
symlinks needed to process the \*(L"..\*(R" segments correctly.  The
\&\fBrealpath()\fR function also requires the file at \f(CW$path\fR to exist.
.ie n .IP "find_prog( $name )" 4
.el .IP "find_prog( \f(CW$name\fR )" 4
.IX Item "find_prog( $name )"
.PD 0
.ie n .IP "find_prog( $path )" 4
.el .IP "find_prog( \f(CW$path\fR )" 4
.IX Item "find_prog( $path )"
.PD
This function returns the full path to the given program if it can be
located on the system.  Otherwise \f(CW\*(C`undef\*(C'\fR is returned.
.Sp
The returned path might be relative.
.ie n .IP "is_abs_path( $path )" 4
.el .IP "is_abs_path( \f(CW$path\fR )" 4
.IX Item "is_abs_path( $path )"
Returns \s-1TRUE\s0 if \f(CW$path\fR is an absolute file name.  This function works
the same as File::Spec method \fBfile_name_is_absolute()\fR.
.ie n .IP "join_path( $base, $path )" 4
.el .IP "join_path( \f(CW$base\fR, \f(CW$path\fR )" 4
.IX Item "join_path( $base, $path )"
Returns a path that will reference the same file as \f(CW$path\fR does when
the current directory is \f(CW$base\fR.  If \f(CW$path\fR is absolute then it is
returned unchanged.
.Sp
The \f(CW$base\fR should reference an existing directory.  The \f(CW$path\fR does not
have to refence an existing file or directory.
.Sp
Any leading \*(L".\*(R" and \*(L"..\*(R" segments are removed from the \f(CW$path\fR before
the paths are joined.  In order to process \*(L"..\*(R" segments \fBjoin_path()\fR
will need to resolve symlinks in \f(CW$base\fR, and the function might croak
if this involves a symlink cycle.
.IP "\fBpath_list()\fR" 4
.IX Item "path_list()"
Returns the list of directories that will be searched to find
programs.  The \fBpath_list()\fR is derived from the \s-1PATH\s0 environment
variable.  In scalar context this returns the number of paths to be
searched.
.Sp
On Unix when the \s-1PATH\s0 environment variable is not present then this
function returns an empty list, but most shells still default to a
path list like (\fI/usr/bin\fR, \fI/bin\fR).
.ie n .IP "realpath( $path )" 4
.el .IP "realpath( \f(CW$path\fR )" 4
.IX Item "realpath( $path )"
Returns the canonicalized absolute pathname of the path passed in.
All symbolic links are expanded and references to \fI/./\fR, \fI/../\fR and
extra \fI/\fR characters are resolved.  The \f(CW$path\fR passed in must be an
existing file.  The function will croak if not, or if the symbolic
links can't be expanded.
.Sp
This differs from the \fBCwd::realpath()\fR function in that \f(CW$path\fR does
not have to be a directory.
.ie n .IP "rel_path( $base, $path )" 4
.el .IP "rel_path( \f(CW$base\fR, \f(CW$path\fR )" 4
.IX Item "rel_path( $base, $path )"
Return a relative pathname that denotes the same file as \f(CW$path\fR when
\&\f(CW$base\fR is the current directory.
.Sp
The \f(CW$base\fR should reference an existing directory.  The \f(CW$path\fR does not
have to refence an existing file or directory.
.Sp
This function differs from the File::Spec method \fBabs2rel()\fR in that it
make sure that any \*(L"..\*(R" segments in the returned value is correct when
the corresponding \f(CW$base\fR segments are symlinks.  If the \f(CW$base\fR path
contains symlink cycles there might not be any relative path that can
be produced, and in that case \fBrel_path()\fR falls back to returning
abs_path($path).
.ie n .IP "unsymlinked( $path )" 4
.el .IP "unsymlinked( \f(CW$path\fR )" 4
.IX Item "unsymlinked( $path )"
If \f(CW$path\fR denotes a symlink expand it, otherwise return \f(CW$path\fR
unchanged.  The \f(CW$path\fR must reference an existing file.  This function
differs from \fBrealpath()\fR by only expanding the symlink at the last
segment of \f(CW$path\fR.
.Sp
On systems that don't implement symlinks this function is a noop,
always returning \f(CW$path\fR unchanged.
.Sp
This function will croak if it's not possible to expand the symlink
because of cycles.
.SH "BUGS"
.IX Header "BUGS"
none.
