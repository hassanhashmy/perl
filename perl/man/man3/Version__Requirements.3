.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Version::Requirements 3"
.TH Version::Requirements 3 "2015-03-26" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Version::Requirements \- a set of version requirements for a CPAN dist
.SH "VERSION"
.IX Header "VERSION"
version 0.101023
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Version::Requirements;
\&
\&  my $build_requires = Version::Requirements\->new;
\&
\&  $build_requires\->add_minimum(\*(AqLibrary::Foo\*(Aq => 1.208);
\&
\&  $build_requires\->add_minimum(\*(AqLibrary::Foo\*(Aq => 2.602);
\&
\&  $build_requires\->add_minimum(\*(AqModule::Bar\*(Aq  => \*(Aqv1.2.3\*(Aq);
\&
\&  $METAyml\->{build_requires} = $build_requires\->as_string_hash;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Version::Requirements object models a set of version constraints like those
specified in the \fI\s-1META\s0.yml\fR or \fI\s-1META\s0.json\fR files in \s-1CPAN\s0 distributions.  It
can be built up by adding more and more constraints, and it will reduce them to
the simplest representation.
.PP
Logically impossible constraints will be identified immediately by thrown
exceptions.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $req = Version::Requirements\->new;
.Ve
.PP
This returns a new Version::Requirements object.  It ignores any arguments
given.
.SS "add_minimum"
.IX Subsection "add_minimum"
.Vb 1
\&  $req\->add_minimum( $module => $version );
.Ve
.PP
This adds a new minimum version requirement.  If the new requirement is
redundant to the existing specification, this has no effect.
.PP
Minimum requirements are inclusive.  \f(CW$version\fR is required, along with any
greater version number.
.PP
This method returns the requirements object.
.SS "add_maximum"
.IX Subsection "add_maximum"
.Vb 1
\&  $req\->add_maximum( $module => $version );
.Ve
.PP
This adds a new maximum version requirement.  If the new requirement is
redundant to the existing specification, this has no effect.
.PP
Maximum requirements are inclusive.  No version strictly greater than the given
version is allowed.
.PP
This method returns the requirements object.
.SS "add_exclusion"
.IX Subsection "add_exclusion"
.Vb 1
\&  $req\->add_exclusion( $module => $version );
.Ve
.PP
This adds a new excluded version.  For example, you might use these three
method calls:
.PP
.Vb 2
\&  $req\->add_minimum( $module => \*(Aq1.00\*(Aq );
\&  $req\->add_maximum( $module => \*(Aq1.82\*(Aq );
\&
\&  $req\->add_exclusion( $module => \*(Aq1.75\*(Aq );
.Ve
.PP
Any version between 1.00 and 1.82 inclusive would be acceptable, except for
1.75.
.PP
This method returns the requirements object.
.SS "exact_version"
.IX Subsection "exact_version"
.Vb 1
\&  $req\->exact_version( $module => $version );
.Ve
.PP
This sets the version required for the given module to \fIexactly\fR the given
version.  No other version would be considered acceptable.
.PP
This method returns the requirements object.
.SS "add_requirements"
.IX Subsection "add_requirements"
.Vb 1
\&  $req\->add_requirements( $another_req_object );
.Ve
.PP
This method adds all the requirements in the given Version::Requirements object
to the requirements object on which it was called.  If there are any conflicts,
an exception is thrown.
.PP
This method returns the requirements object.
.SS "accepts_module"
.IX Subsection "accepts_module"
.Vb 1
\&  my $bool = $req\->accepts_modules($module => $version);
.Ve
.PP
Given an module and version, this method returns true if the version
specification for the module accepts the provided version.  In other words,
given:
.PP
.Vb 1
\&  Module => \*(Aq>= 1.00, < 2.00\*(Aq
.Ve
.PP
We will accept 1.00 and 1.75 but not 0.50 or 2.00.
.PP
For modules that do not appear in the requirements, this method will return
true.
.SS "clear_requirement"
.IX Subsection "clear_requirement"
.Vb 1
\&  $req\->clear_requirement( $module );
.Ve
.PP
This removes the requirement for a given module from the object.
.PP
This method returns the requirements object.
.SS "required_modules"
.IX Subsection "required_modules"
This method returns a list of all the modules for which requirements have been
specified.
.SS "clone"
.IX Subsection "clone"
.Vb 1
\&  $req\->clone;
.Ve
.PP
This method returns a clone of the invocant.  The clone and the original object
can then be changed independent of one another.
.SS "is_simple"
.IX Subsection "is_simple"
This method returns true if and only if all requirements are inclusive minimums
\&\*(-- that is, if their string expression is just the version number.
.SS "is_finalized"
.IX Subsection "is_finalized"
This method returns true if the requirements have been finalized by having the
\&\f(CW\*(C`finalize\*(C'\fR method called on them.
.SS "finalize"
.IX Subsection "finalize"
This method marks the requirements finalized.  Subsequent attempts to change
the requirements will be fatal, \fIif\fR they would result in a change.  If they
would not alter the requirements, they have no effect.
.PP
If a finalized set of requirements is cloned, the cloned requirements are not
also finalized.
.SS "as_string_hash"
.IX Subsection "as_string_hash"
This returns a reference to a hash describing the requirements using the
strings in the \fI\s-1META\s0.yml\fR specification.
.PP
For example after the following program:
.PP
.Vb 1
\&  my $req = Version::Requirements\->new;
\&
\&  $req\->add_minimum(\*(AqVersion::Requirements\*(Aq => 0.102);
\&
\&  $req\->add_minimum(\*(AqLibrary::Foo\*(Aq => 1.208);
\&
\&  $req\->add_maximum(\*(AqLibrary::Foo\*(Aq => 2.602);
\&
\&  $req\->add_minimum(\*(AqModule::Bar\*(Aq  => \*(Aqv1.2.3\*(Aq);
\&
\&  $req\->add_exclusion(\*(AqModule::Bar\*(Aq  => \*(Aqv1.2.8\*(Aq);
\&
\&  $req\->exact_version(\*(AqXyzzy\*(Aq  => \*(Aq6.01\*(Aq);
\&
\&  my $hashref = $req\->as_string_hash;
.Ve
.PP
\&\f(CW$hashref\fR would contain:
.PP
.Vb 6
\&  {
\&    \*(AqVersion::Requirements\*(Aq => \*(Aq0.102\*(Aq,
\&    \*(AqLibrary::Foo\*(Aq => \*(Aq>= 1.208, <= 2.206\*(Aq,
\&    \*(AqModule::Bar\*(Aq  => \*(Aq>= v1.2.3, != v1.2.8\*(Aq,
\&    \*(AqXyzzy\*(Aq        => \*(Aq== 6.01\*(Aq,
\&  }
.Ve
.SS "from_string_hash"
.IX Subsection "from_string_hash"
.Vb 1
\&  my $req = Version::Requirements\->from_string_hash( \e%hash );
.Ve
.PP
This is an alternate constructor for a Version::Requirements object.  It takes
a hash of module names and version requirement strings and returns a new
Version::Requirements object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Karen Etheridge <ether@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
