.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tkx::Tutorial 3"
.TH Tkx::Tutorial 3 "2009-11-29" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tkx::Tutorial \- How to use Tkx
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fITk\fR is a toolkit for creating applications with
graphical interfaces on Windows, Mac \s-1OS X\s0 and X11.  The Tk toolkit
is native to the \fITcl\fR programming language, but its ease of use and
cross-platform availability has made it the \s-1GUI\s0 toolkit of choice for
many other dynamic languages.
.PP
\&\fITkx\fR is a Perl module that makes the Tk toolkit available to Perl
programs.  By loading the Tkx module Perl programs can create
windows and fill them with text, images, buttons and other controls
that make up the user interface of the application.
.SS "Hello World"
.IX Subsection "Hello World"
Let's start with the mandatory exercise of creating an application
that greats the world.  We'll make the application window contain a
single button which will shut down the application if clicked.  The
code to make this happen is:
.PP
.Vb 1
\&    use Tkx;
\&    
\&    Tkx::button(".b",
\&        \-text => "Hello, world",
\&        \-command => sub { Tkx::destroy("."); },
\&    );
\&    Tkx::pack(".b");
\&    
\&    Tkx::MainLoop()
.Ve
.PP
Save this to a file called \fIhello.pl\fR and then run \f(CW\*(C`perl hello.pl\*(C'\fR
to start the application.  A window with the text \*(L"Hello, world\*(R"
should appear on your screen.  Let's look at what this code is doing.
.PP
After the Tkx module has been loaded by the \f(CW\*(C`use Tkx\*(C'\fR statement, the
application will show an empty window called \*(L".\*(R".  We create a \fIbutton\fR
with the name \*(L".b\*(R" and tell the window to display the button with the
call to \f(CW\*(C`Tkx::pack()\*(C'\fR.  After the layout of the window has been set up,
we need to pass control back to Tk so that it can draw the window and
invoke our callback if the button is clicked.  This is done with the
\&\f(CW\*(C`Tkx::MainLoop()\*(C'\fR call at the end.  Clicking the button will invoke the
subroutine registered with the button's \f(CW\*(C`\-command\*(C'\fR option.  In this
case the callback destroys the window, which in turn terminates the
application.
.PP
For reference, this is how the same program would look in Tcl:
.PP
.Vb 1
\&    package require Tk
\&    
\&    button .b \e
\&        \-text "Hello, world" \e
\&        \-command { destroy . }
\&    pack .b
.Ve
.PP
This program can be executed by the \fItclsh\fR binary that comes with
Tcl/Tk.  As you can see the code is mostly identical, but with a
slightly different syntax.  The only difference is that the call
to \fBMainLoop()\fR is implicit in Tcl and does not have to be spelled out.
.PP
Tkx does not include documentation for all the Tk widgets available for
use.  Instead you will need to read the mostly excellent documentation
that comes with Tcl/Tk and extrapolate the Tkx syntax.  This translation
is relatively straightforward and basically involves adding the prefix
\&\*(L"Tkx::\*(R" to all the functions and passing arguments with Perl syntax (as
with the Tkx::button examples above).  The Tk documentation can be found
here:
.PP
<http://aspn.activestate.com/ASPN/docs/ActiveTcl/at.pkg_index.html>.
.PP
This documents core Tk and useful add-on packages that are part of
ActiveTcl. The ActiveTcl \s-1HTML\s0 documentation can also be downloaded from
<http://downloads.activestate.com/ActiveTcl/html/> and installed
locally.  The official Tcl/Tk docs are found at
<http://www.tcl.tk/doc/>.
.PP
A major complication in the mapping to Perl is how to invoke
subcommands on Tk widgets.  For example, if you want to change the
text of the button created above you might in Tcl do:
.PP
.Vb 1
\&    .b configure \-text "Goodbye, cuel world"
.Ve
.PP
a literal translation to Tkx would be:
.PP
.Vb 1
\&    Tkx::.b("configure", \-text => "Goodbye, cruel world");
.Ve
.PP
or
.PP
.Vb 1
\&    Tkx::.b_configure(\-text => "Goodbye, cruel world");
.Ve
.PP
but neither of those work as you can't use \*(L".\*(R" as part of function
names in Perl.  Because of this we almost always use objects when
working with Tkx widgets.
.SS "Hello World with objects"
.IX Subsection "Hello World with objects"
The windows and controls that make up a Tk interface are called
\&\fIwidgets\fR.  The widgets are identified by path names of the form
\&\f(CW\*(C`.foo.bar.baz\*(C'\fR.  These names are hierarchical in the same way as file
system names are, but \*(L".\*(R" is used instead of \*(L"/\*(R" to separate levels.
The name \f(CW\*(C`.foo.bar.baz\*(C'\fR is the name of a widget that is child of widget
\&\f(CW\*(C`.foo.bar\*(C'\fR which in turn is a child of \f(CW\*(C`.foo\*(C'\fR.  At the top of this
hierarchy we have a widget called \f(CW\*(C`.\*(C'\fR, which is the main window of
the application.
.PP
The Tkx module provides the \f(CW\*(C`Tkx::widget\*(C'\fR class, which can be
used to hide the details of Tk path names from Tkx applications.
This provide a more \*(L"perlish\*(R" way to create and manipulate Tk widgets.
It also provide a convenient way to invoke subcommands (methods) on
the widgets.
.PP
Our \*(L"Hello, world\*(R" program can be rewritten like this using the
\&\f(CW\*(C`Tkx::widget\*(C'\fR class:
.PP
.Vb 1
\&    use Tkx;
\&    
\&    my $mw = Tkx::widget\->new(".");
\&    my $b = $mw\->new_button(
\&        \-text => "Hello, world",
\&        \-command => sub { $mw\->g_destroy; },
\&    );
\&    $b\->g_pack;
\&    
\&    Tkx::MainLoop()
.Ve
.PP
By loading the Tkx module, we make the \f(CW\*(C`Tkx::widget\*(C'\fR class
available and create the main window (the widget called \f(CW\*(C`.\*(C'\fR).  Next,
we instantiate a new \f(CW\*(C`Tkx::widget\*(C'\fR object wrapping the main window.
It is customary to name this object \f(CW$mw\fR.
.PP
To create a new button child widget we call the \f(CW\*(C`$mw\->new_button\*(C'\fR
method.  Constructor methods are always prefixed with \f(CW\*(C`new_\*(C'\fR.  The rest
of the method name is the name of the Tk widget to create; i.e. \*(L"button\*(R"
in this case.  Arguments are passed as before.
.PP
Calling a \*(L"g_\*(R" method will invoke the corresponding Tk command with the
widget path as argument.  In the code above we destroy the main window
by calling \f(CW\*(C`$mw\->g_destroy\*(C'\fR and we pack the button in the main
window by invoking \f(CW\*(C`$b\->g_pack\*(C'\fR.
.PP
In the end the MainLoop is invoked as before.
.PP
For trivial programs like the one above, using \f(CW\*(C`Tkx::widget\*(C'\fR wrappers
does not appear to be very helpful, but as the application grows and the
Tk path names get longer, the advantage is more noticable.
.SS "Hello World expanded"
.IX Subsection "Hello World expanded"
The following, slightly expanded version of the previous Hello World
program, introduces a few more Tkx features.  Line numbers have been
added to the program for easier to reference back to its statements:
.PP
.Vb 10
\&    1   use strict;
\&    2   use Tkx;
\&    3   
\&    4   my $mw = Tkx::widget\->new(".");
\&    5   $mw\->g_wm_title("Hello, world");
\&    6   $mw\->g_wm_minsize(300, 200);
\&    7   
\&    8   my $b;
\&    9   $b = $mw\->new_button(
\&    10      \-text => "Hello, world",
\&    11      \-command => sub {
\&    12          $b\->m_configure(
\&    13              \-text => "Goodbye, cruel world",
\&    14          );
\&    15          Tkx::after(1500, sub { $mw\->g_destroy });
\&    16      },
\&    17  );
\&    18  $b\->g_pack(
\&    19      \-padx => 10,
\&    20      \-pady => 10,
\&    21  );
\&    22  
\&    23  Tkx::tk_\|_\|_messageBox(
\&    24     \-parent => $mw,
\&    25     \-icon => "info",
\&    26     \-title => "Tip of the Day",
\&    27     \-message => "Please be nice!",
\&    28  );
\&    29  
\&    30  Tkx::MainLoop()
.Ve
.PP
The first thing we add is the \f(CW\*(C`use strict\*(C'\fR statement, because
that's a good practice in general.
.PP
In line 5 and 6 we set up some window manager attributes of the main
application window.  We use underscore in the g_ method names where Tcl
would use space between words.  The same rules apply to the function
names in the \f(CW\*(C`Tkx::\*(C'\fR namespace directly.  We could alternatively have
modified the window attributes with:
.PP
.Vb 2
\&    Tkx::wm_title($mw, "Hello, world");
\&    Tkx::wm_minsize($mw, 300, 200);
.Ve
.PP
In Tcl, this would be:
.PP
.Vb 2
\&    wm title . "Hello, world"
\&    wm minsize . 300 200
.Ve
.PP
The rule is: A single underscore on the Perl side turns into space on
the Tcl side.
.PP
In line 11 to 16 we have expanded the button callback to change the text
of button and wait 1.5 seconds before shutting down the application.  In
addition to the \*(L"g_\*(R" methods described in the previous section,
\&\f(CW\*(C`Tkx::widget\*(C'\fR also provides \*(L"m_\*(R" methods which are forwarded as Tcl
subcommands of the current widget.  The most commonly used subcommand is
\&\*(L"configure\*(R" that is used to change the attributes of a widget as we do
in line 12.  Since we now reference \f(CW$b\fR from the callback, we had to
declare the variable upfront in line 8 instead of declaring it together
with the assignment as we did previously.  In line 15 we destroy the
window after a delay of 1500ms, which should be enough time to read the
new \*(L"Goodbye, cruel world\*(R" text.
.PP
The \*(L"m_\*(R" method prefix is optional, you might prefer to leave it out.
.PP
Line 18 adds padding around buttons, which is usually a good idea.
.PP
In line 23 we invoke the messageBox command to pop up a useful
reminder to our user.  But what's up with the \*(L"tk_\|_\|_\*(R" prefix?  In the
Tcl docs you will find that the name of this command is actually
\&\*(L"tk_messageBox\*(R".  Remember the previous rule that an underscore in
Tkx:: names turn into a space on the Tcl side?  If you try to call
\&\f(CW\*(C`Tkx::tk_messageBox()\*(C'\fR you will get an error telling you:
.PP
.Vb 2
\&    bad option "messageBox": must be appname, caret, scaling,
\&    useinputmethods, or windowingsystem
.Ve
.PP
What happens is that Tkx invoked the \*(L"tk messageBox\*(R" command, but the
Tcl \*(L"tk\*(R" command only takes the subcommands listed in the error message
above and refuse to do anything about \*(L"messageBox\*(R".  In order to invoke
Tcl commands with underscore their name, you need to \fItriple\fR the
underscore on the Perl side, which gives us \f(CW\*(C`Tkx::tk_\|_\|_messageBox()\*(C'\fR.
Double underscores in names have yet another meaning that we will tell
you about in the next section.
.SS "Setting up a menu line"
.IX Subsection "Setting up a menu line"
Most real \s-1GUI\s0 application will need a menu line at the top of the
application window or screen.  The following runnable program shows
how a minimal menu can be set up with Tkx:
.PP
.Vb 10
\&    1   #!/usr/bin/perl \-w
\&    2   
\&    3   use strict;
\&    4   use Tkx;
\&    5   
\&    6   our $VERSION = "1.00";
\&    7   
\&    8   (my $progname = $0) =~ s,.*[\e\e/],,;
\&    9   my $IS_AQUA = Tkx::tk_windowingsystem() eq "aqua";
\&    10  
\&    11  Tkx::package_require("style");
\&    12  Tkx::style_\|_use("as", \-priority => 70);
\&    13  
\&    14  my $mw = Tkx::widget\->new(".");
\&    15  $mw\->configure(\-menu => mk_menu($mw));
\&    16  
\&    17  Tkx::MainLoop();
\&    18  exit;
\&    19  
\&    20  sub mk_menu {
\&    21      my $mw = shift;
\&    22      my $menu = $mw\->new_menu;
\&    23  
\&    24      my $file = $menu\->new_menu(
\&    25          \-tearoff => 0,
\&    26      );
\&    27      $menu\->add_cascade(
\&    28          \-label => "File",
\&    29          \-underline => 0,
\&    30          \-menu => $file,
\&    31      );
\&    32      $file\->add_command(
\&    33          \-label => "New",
\&    34          \-underline => 0,
\&    35          \-accelerator => "Ctrl+N",
\&    36          \-command => \e&new,
\&    37      );
\&    38      $mw\->g_bind("<Control\-n>", \e&new);
\&    39      $file\->add_command(
\&    40          \-label   => "Exit",
\&    41          \-underline => 1,
\&    42          \-command => [\e&Tkx::destroy, $mw],
\&    43      ) unless $IS_AQUA;
\&    44  
\&    45      my $help = $menu\->new_menu(
\&    46          \-name => "help",
\&    47          \-tearoff => 0,
\&    48      );
\&    49      $menu\->add_cascade(
\&    50          \-label => "Help",
\&    51          \-underline => 0,
\&    52          \-menu => $help,
\&    53      );
\&    54      $help\->add_command(
\&    55          \-label => "\eu$progname Manual",
\&    56          \-command => \e&show_manual,
\&    57      );
\&    58  
\&    59      my $about_menu = $help;
\&    60      if ($IS_AQUA) {
\&    61          # On Mac OS we want about box to appear in the application
\&    62          # menu.  Anything added to a menu with the name "apple" will
\&    63          # appear in this menu.
\&    64          $about_menu = $menu\->new_menu(
\&    65              \-name => "apple",
\&    66          );
\&    67          $menu\->add_cascade(
\&    68              \-menu => $about_menu,
\&    69          );
\&    70      }
\&    71      $about_menu\->add_command(
\&    72          \-label => "About \eu$progname",
\&    73          \-command => \e&about,
\&    74      );
\&    75  
\&    76      return $menu;
\&    77  }
\&    78  
\&    79  
\&    80  sub about {
\&    81      Tkx::tk_\|_\|_messageBox(
\&    82          \-parent => $mw,
\&    83          \-title => "About \eu$progname",
\&    84          \-type => "ok",
\&    85          \-icon => "info",
\&    86          \-message => "$progname v$VERSION\en" .
\&    87                      "Copyright 2005 ActiveState. " .
\&    88                      "All rights reserved.",
\&    89      );
\&    90  }
.Ve
.PP
We start out as all proper Perl programs should by enabling warnings and
stricture at line 1 and 3.  Then, we load Tkx which will create our main
application window at line 4.
.PP
In line 9 we initialize the \f(CW$IS_AQUA\fR constant.  Aqua is the native
interface of Mac \s-1OS X.\s0  We need this constant because the menu layout
on Aqua is not the same as in other windowing systems.  Note that
Tk on Mac \s-1OS X\s0 can be compiled against either Aqua or X11.  When our
application runs under X11 we want to use the standard Unix menu
layout, so it would not be correct to just make our code conditional
on what operating system it runs under (\f(CW\*(C`$^O eq \*(Aqdarwin\*(Aq\*(C'\fR for Mac
\&\s-1OS X\s0).
.PP
In line 11 and 12 we override the default look&feel style of Tk to a
more modern variant. Tcl packages can be loaded with the
\&\f(CW\*(C`Tkx::package_require()\*(C'\fR function and we can access the Tcl command
\&\f(CW\*(C`style::use\*(C'\fR as \f(CW\*(C`Tkx::style_\|_use\*(C'\fR in Perl, i.e. we need to turn the
double colon into a double underscore.  More about Tcl packages and
namespaces in the next section.
.PP
In line 14, we obtain a \f(CW\*(C`Tkx::widget\*(C'\fR reference to the main window as
before, then set up the application menu by setting up the \f(CW\*(C`\-menu\*(C'\fR
option of the main window in line 15.
.PP
In a real application there would be additional code between line 15
and 17 to set up the rest of the application window, but for this
demonstration we'll just leave the window empty.
.PP
In line 17, we ask Tk to start processing events by invoking
\&\f(CW\*(C`Tkx::MainLoop()\*(C'\fR.  This function will return when the application
window has been destroyed.  When that happens, we exit at line 18.
.PP
The application menu itself is set up and returned by the \f(CW\*(C`mk_menu()\*(C'\fR
function in line 20 to 77.  This code should be easy enough to follow.
Note how we make \fIFile | New\fR and \fIHelp | Foo Manual\fR both reference
functions that are not yet written.  The application will still run,
but when you try to invoke these menu entries you get an \*(L"Application
Error Dialog\*(R" from Tk.  It is handy to be able to leave stubs like
this around during the development, just remember to add the \f(CW\*(C`new\*(C'\fR
and \f(CW\*(C`show_manual\*(C'\fR functions before the application ships.
.PP
The \f(CW\*(C`\-underline\*(C'\fR options are provided to make it possible to select
menu entries with the keyboard.  The corresponding character of the
\&\f(CW\*(C`\-label\*(C'\fR will be underlined and you will be able to select this entry
by pressing the key when the menu is active.
.PP
It is also possible to set up direct keyboard shortcuts as we've done
for the \fIFile | New\fR function at line 32.  Note that the
\&\f(CW\*(C`\-accelerator\*(C'\fR option only adds the text to the menu item, so we need
to use an explicit call to set up this binding in line 38.
.PP
For Aqua we don't want to add the \*(L"File | Exit\*(R" entry to the menu
because the \s-1OS\s0 itself always provide a Quit action in the application
menu.  Aqua applications will also need to add the \*(L"About\*(R" function
on the application menu instead of the \*(L"Help\*(R" menu as is common on
other platforms.
.PP
The menu names \*(L"apple\*(R" and \*(L"help\*(R" provided in line 46 and 65 has special
significance to Tk.  Menu items added to the \*(L"apple\*(R" menu will show up
in the application menu.  In Mac \s-1OS X\s0 these entries show up at the top
of the menu just right of the apple.  If not provided, Tk provides its
own \*(L"About\*(R" entry that will tell you about what version of Tcl/Tk you
are using.  A menu called \*(L"help\*(R" will be flushed right on Unix, even
though this style seems to be out of fashion in modern Unix
applications.
.PP
The Tkx distribution contains a script called \fImenu\fR which is a
runnable version of the program shown here.  You might want to use
this as a starting point for your own Tkx applications.
.SS "Using Tcl packages"
.IX Subsection "Using Tcl packages"
When the Perl application starts up and loads Tkx, the only functions
available in the \f(CW\*(C`Tkx::\*(C'\fR namespace are those commands provided by core
Tcl/Tk.  These commands are described in the \*(L"Tcl\*(R" and \*(L"Tk\*(R" sections
at <http://aspn.activestate.com/ASPN/docs/ActiveTcl/at.pkg_index.html>.
.PP
Additional commands can be loaded from Tcl packages.  Once loaded, new
commands show up in the \f(CW\*(C`Tkx::\*(C'\fR namespace.  This example loads the
\&\*(L"Tktable\*(R" package in order to make the \f(CW\*(C`table\*(C'\fR command available for
createing \fItable\fR widgets:
.PP
.Vb 2
\&    use Tkx;
\&    Tkx::package_require("Tktable");
\&
\&    my $mw = Tkx::widget\->new(".");
\&    my $t = $mw\->new_table(
\&        \-rows => 5,
\&        \-cols => 3,
\&    );
\&    $t\->g_pack;
\&    
\&    Tkx::MainLoop()
.Ve
.PP
Packages are loaded by calling the \f(CW\*(C`Tkx::package_require()\*(C'\fR function
taking the package name as argument.  An optional version number can
be provided as the second argument if you want to make sure a certain
version or newer is loaded.
.PP
One source of confusion here is the proper spelling of the
package name to provide to \fBTkx::package_require()\fR.  The Tcl/Tk
documentation will call the package in the example above \fITkTable\fR
(with two upper case \*(L"T\*(R"s) and not really mention the exact spelling
of the package name (only one upper case \*(L"T\*(R").  In some cases the
\&\*(L"synopsis\*(R" section describing the package will spell out the package
name, but in cases like this we have found no better way than to look 
into the \fIpkgIndex.tcl\fR files in the Tcl \fIlib/\fR area if loading the
package fails.  The package documented as \*(L"BWidgets\*(R" should be loaded
as \*(L"BWidget\*(R" (without the \*(L"s\*(R") and the package documented as
\&\*(L"IWidgets\*(R" should be loaded as \*(L"Iwidgets\*(R" (with a lower case \*(L"w\*(R").
.PP
Most modern Tcl packages do not create names at the top level like
TkTable above.  Instead, they create functions in a Tcl namespace with a
name matching the package name.  In the menu example of the previous
section we loaded the \*(L"style\*(R" package which created a command called
\&\*(L"use\*(R" in the \*(L"style\*(R" namespace.  This command can be referenced as
\&\*(L"::style::use\*(R" or \*(L"style::use\*(R" from Tcl.  From Perl this maps to a
function called \f(CW\*(C`Tkx::style_\|_use\*(C'\fR (i.e. we replace the double colon
with double underscore and ignore the colon in the front).  Read Tkx
for details about how sequences of \*(L"_\*(R" in \f(CW\*(C`Tkx::\*(C'\fR names are mapped to
Tcl names.
.SS "Subclassing Tkx::widget"
.IX Subsection "Subclassing Tkx::widget"
In Tkx applications it is often convenient to use your own subclass of
\&\f(CW\*(C`Tkx::widget\*(C'\fR where you can introduce shortcuts and adapters for the
raw Tcl commands.  The following is an example class, which could be
saved to the file \fIMyWidget.pm\fR:
.PP
.Vb 10
\&    1   package MyWidget;
\&    2   
\&    3   use strict;
\&    4   use base qw(Tkx::widget);
\&    5   use Carp qw(croak);
\&    6   
\&    7   sub messageBox {
\&    8       my $self = shift;
\&    9       return Tkx::tk_\|_\|_messageBox(\-parent => $self, @_);
\&    10  }
\&    11  
\&    12  sub getOpenFile {
\&    13      my $self = shift;
\&    14      return Tkx::tk_\|_\|_getOpenFile(\-parent => $self, @_);
\&    15  }
\&    16  
\&    17  sub bell {
\&    18      my $self = shift;
\&    19      Tkx::bell(\-displayof => $self, @_);
\&    20  }
\&    21  
\&    30  sub pack {
\&    31      my $self = shift;
\&    32      $self\->g_pack(@_);
\&    33      return $self;
\&    34  }
\&    35  
\&    36  sub _nclass {
\&    37      return _\|_PACKAGE_\|_;
\&    38  }
\&    39  
\&    40  1;
.Ve
.PP
The main program would use it like this:
.PP
.Vb 4
\&    use Tkx;
\&    use MyWidget;
\&    my $mw = MyWidget\->new(".");
\&    $mw\->messageBox(...);
\&    
\&    ...
\&
\&    Tkx::MainLoop();
.Ve
.PP
The MyWidget class above provides shortcuts for the \*(L"messageBox\*(R" and
\&\*(L"getOpenFile\*(R" in order to hide the triple underscore ugliness and
propagate the \f(CW\*(C`\-parent\*(C'\fR attribute.  Similar reasoning exists for the
\&\*(L"bell\*(R".
.PP
The \f(CW\*(C`pack\*(C'\fR method is provided so that we can initialize and pack a
widget in the same statement and avoid repeated typing of the \*(L"g_\*(R"
method prefix:
.PP
.Vb 1
\&    my $b = $mw\->new_button(...)\->pack;
.Ve
.PP
The \f(CW\*(C`_nclass\*(C'\fR method needs to be overridden so that any new widget
children created also end up as MyWidget objects.  This method is called
internally by methods like \f(CW\*(C`$mw\->new_button(...)\*(C'\fR to determine
which kind of object will wrap the newly created widget path.
.PP
Having you own application-specific widget class provides a place to add
methods discovered by refactoring repeated code in your application.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Copyright 2005 ActiveState.  All rights reserved.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tkx
.PP
The bundled sample programs; tkx-ed, tkx-prove.
